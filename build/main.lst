ARM GAS  /tmp/cc9h6Bqx.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.cpp"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text._ZL12MX_GPIO_Initv,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	_ZL12MX_GPIO_Initv:
  23              	.LFB101:
  24              		.file 1 "Src/main.cpp"
   1:Src/main.cpp  **** /* USER CODE BEGIN Header */
   2:Src/main.cpp  **** /**
   3:Src/main.cpp  ****   ******************************************************************************
   4:Src/main.cpp  ****   * @file           : main.c
   5:Src/main.cpp  ****   * @brief          : Main program body
   6:Src/main.cpp  ****   ******************************************************************************
   7:Src/main.cpp  ****   * @attention
   8:Src/main.cpp  ****   *
   9:Src/main.cpp  ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.cpp  ****   * All rights reserved.</center></h2>
  11:Src/main.cpp  ****   *
  12:Src/main.cpp  ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.cpp  ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.cpp  ****   * License. You may obtain a copy of the License at:
  15:Src/main.cpp  ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.cpp  ****   *
  17:Src/main.cpp  ****   ******************************************************************************
  18:Src/main.cpp  ****   */
  19:Src/main.cpp  **** /* USER CODE END Header */
  20:Src/main.cpp  **** 
  21:Src/main.cpp  **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.cpp  **** #include "main.h"
  23:Src/main.cpp  **** 
  24:Src/main.cpp  **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.cpp  **** /* USER CODE BEGIN Includes */
  26:Src/main.cpp  **** #include "FwLogger.h"
  27:Src/main.cpp  **** /* USER CODE END Includes */
  28:Src/main.cpp  **** 
  29:Src/main.cpp  **** /* Private typedef -----------------------------------------------------------*/
  30:Src/main.cpp  **** /* USER CODE BEGIN PTD */
  31:Src/main.cpp  **** 
  32:Src/main.cpp  **** /* USER CODE END PTD */
  33:Src/main.cpp  **** 
  34:Src/main.cpp  **** /* Private define ------------------------------------------------------------*/
ARM GAS  /tmp/cc9h6Bqx.s 			page 2


  35:Src/main.cpp  **** /* USER CODE BEGIN PD */
  36:Src/main.cpp  **** /* USER CODE END PD */
  37:Src/main.cpp  **** 
  38:Src/main.cpp  **** /* Private macro -------------------------------------------------------------*/
  39:Src/main.cpp  **** /* USER CODE BEGIN PM */
  40:Src/main.cpp  **** 
  41:Src/main.cpp  **** /* USER CODE END PM */
  42:Src/main.cpp  **** 
  43:Src/main.cpp  **** /* Private variables ---------------------------------------------------------*/
  44:Src/main.cpp  **** ADC_HandleTypeDef hadc1;
  45:Src/main.cpp  **** ADC_HandleTypeDef hadc3;
  46:Src/main.cpp  **** DMA_HandleTypeDef hdma_adc1;
  47:Src/main.cpp  **** DMA_HandleTypeDef hdma_adc3;
  48:Src/main.cpp  **** 
  49:Src/main.cpp  **** DAC_HandleTypeDef hdac;
  50:Src/main.cpp  **** 
  51:Src/main.cpp  **** I2C_HandleTypeDef hi2c1;
  52:Src/main.cpp  **** I2C_HandleTypeDef hi2c2;
  53:Src/main.cpp  **** DMA_HandleTypeDef hdma_i2c1_tx;
  54:Src/main.cpp  **** 
  55:Src/main.cpp  **** RTC_HandleTypeDef hrtc;
  56:Src/main.cpp  **** 
  57:Src/main.cpp  **** SD_HandleTypeDef hsd;
  58:Src/main.cpp  **** 
  59:Src/main.cpp  **** SPI_HandleTypeDef hspi1;
  60:Src/main.cpp  **** SPI_HandleTypeDef hspi2;
  61:Src/main.cpp  **** SPI_HandleTypeDef hspi3;
  62:Src/main.cpp  **** DMA_HandleTypeDef hdma_spi1_tx;
  63:Src/main.cpp  **** 
  64:Src/main.cpp  **** TIM_HandleTypeDef htim1;
  65:Src/main.cpp  **** TIM_HandleTypeDef htim2;
  66:Src/main.cpp  **** TIM_HandleTypeDef htim3;
  67:Src/main.cpp  **** TIM_HandleTypeDef htim4;
  68:Src/main.cpp  **** 
  69:Src/main.cpp  **** UART_HandleTypeDef huart1;
  70:Src/main.cpp  **** UART_HandleTypeDef huart2;
  71:Src/main.cpp  **** UART_HandleTypeDef huart3;
  72:Src/main.cpp  **** DMA_HandleTypeDef hdma_usart1_tx;
  73:Src/main.cpp  **** DMA_HandleTypeDef hdma_usart2_tx;
  74:Src/main.cpp  **** DMA_HandleTypeDef hdma_usart3_tx;
  75:Src/main.cpp  **** 
  76:Src/main.cpp  **** /* USER CODE BEGIN PV */
  77:Src/main.cpp  **** circular_buffer tx_buffer;
  78:Src/main.cpp  **** fixed_string rx_buffer;
  79:Src/main.cpp  **** uint8_t rx_char;
  80:Src/main.cpp  **** uint8_t transmitting;
  81:Src/main.cpp  **** uint8_t command_received;
  82:Src/main.cpp  **** 
  83:Src/main.cpp  **** uint16_t adc1_data[6], adc3_data[6];
  84:Src/main.cpp  **** 
  85:Src/main.cpp  **** FwLogger logger;
  86:Src/main.cpp  **** 
  87:Src/main.cpp  **** /* USER CODE END PV */
  88:Src/main.cpp  **** 
  89:Src/main.cpp  **** /* Private function prototypes -----------------------------------------------*/
  90:Src/main.cpp  **** void SystemClock_Config(void);
  91:Src/main.cpp  **** static void MX_GPIO_Init(void);
ARM GAS  /tmp/cc9h6Bqx.s 			page 3


  92:Src/main.cpp  **** static void MX_DMA_Init(void);
  93:Src/main.cpp  **** static void MX_ADC1_Init(void);
  94:Src/main.cpp  **** static void MX_ADC3_Init(void);
  95:Src/main.cpp  **** static void MX_DAC_Init(void);
  96:Src/main.cpp  **** static void MX_I2C1_Init(void);
  97:Src/main.cpp  **** static void MX_I2C2_Init(void);
  98:Src/main.cpp  **** static void MX_RTC_Init(void);
  99:Src/main.cpp  **** static void MX_SDIO_SD_Init(void);
 100:Src/main.cpp  **** static void MX_SPI1_Init(void);
 101:Src/main.cpp  **** static void MX_SPI2_Init(void);
 102:Src/main.cpp  **** static void MX_SPI3_Init(void);
 103:Src/main.cpp  **** static void MX_TIM1_Init(void);
 104:Src/main.cpp  **** static void MX_TIM2_Init(void);
 105:Src/main.cpp  **** static void MX_TIM3_Init(void);
 106:Src/main.cpp  **** static void MX_TIM4_Init(void);
 107:Src/main.cpp  **** static void MX_USART1_UART_Init(void);
 108:Src/main.cpp  **** static void MX_USART2_UART_Init(void);
 109:Src/main.cpp  **** static void MX_USART3_UART_Init(void);
 110:Src/main.cpp  **** /* USER CODE BEGIN PFP */
 111:Src/main.cpp  **** 
 112:Src/main.cpp  **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);
 113:Src/main.cpp  **** void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart);
 114:Src/main.cpp  **** 
 115:Src/main.cpp  **** /* USER CODE END PFP */
 116:Src/main.cpp  **** 
 117:Src/main.cpp  **** /* Private user code ---------------------------------------------------------*/
 118:Src/main.cpp  **** /* USER CODE BEGIN 0 */
 119:Src/main.cpp  **** 
 120:Src/main.cpp  **** /* USER CODE END 0 */
 121:Src/main.cpp  **** 
 122:Src/main.cpp  **** /**
 123:Src/main.cpp  ****   * @brief  The application entry point.
 124:Src/main.cpp  ****   * @retval int
 125:Src/main.cpp  ****   */
 126:Src/main.cpp  **** int main(void)
 127:Src/main.cpp  **** {
 128:Src/main.cpp  **** 	/* USER CODE BEGIN 1 */
 129:Src/main.cpp  **** 
 130:Src/main.cpp  **** 	/* USER CODE END 1 */
 131:Src/main.cpp  **** 
 132:Src/main.cpp  **** 
 133:Src/main.cpp  **** 	/* MCU Configuration--------------------------------------------------------*/
 134:Src/main.cpp  **** 
 135:Src/main.cpp  **** 	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 136:Src/main.cpp  **** 	HAL_Init();
 137:Src/main.cpp  **** 
 138:Src/main.cpp  **** 	/* USER CODE BEGIN Init */
 139:Src/main.cpp  **** 
 140:Src/main.cpp  **** 	/* USER CODE END Init */
 141:Src/main.cpp  **** 
 142:Src/main.cpp  **** 	/* Configure the system clock */
 143:Src/main.cpp  **** 	SystemClock_Config();
 144:Src/main.cpp  **** 
 145:Src/main.cpp  **** 	/* USER CODE BEGIN SysInit */
 146:Src/main.cpp  **** 
 147:Src/main.cpp  **** 	/* USER CODE END SysInit */
 148:Src/main.cpp  **** 
ARM GAS  /tmp/cc9h6Bqx.s 			page 4


 149:Src/main.cpp  **** 	/* Initialize all configured peripherals */
 150:Src/main.cpp  **** 	MX_GPIO_Init();
 151:Src/main.cpp  **** 	MX_DMA_Init();
 152:Src/main.cpp  **** 	MX_ADC1_Init();
 153:Src/main.cpp  **** 	MX_ADC3_Init();
 154:Src/main.cpp  **** 	MX_DAC_Init();
 155:Src/main.cpp  **** 	MX_I2C1_Init();
 156:Src/main.cpp  **** 	MX_I2C2_Init();
 157:Src/main.cpp  **** 	MX_RTC_Init();
 158:Src/main.cpp  **** 	MX_SDIO_SD_Init();
 159:Src/main.cpp  **** 	MX_SPI1_Init();
 160:Src/main.cpp  **** 	MX_SPI2_Init();
 161:Src/main.cpp  **** 	MX_SPI3_Init();
 162:Src/main.cpp  **** 	MX_TIM1_Init();
 163:Src/main.cpp  **** 	MX_TIM2_Init();
 164:Src/main.cpp  **** 	MX_TIM3_Init();
 165:Src/main.cpp  **** 	MX_TIM4_Init();
 166:Src/main.cpp  **** 	MX_USART1_UART_Init();
 167:Src/main.cpp  **** 	MX_USART2_UART_Init();
 168:Src/main.cpp  **** 	MX_USART3_UART_Init();
 169:Src/main.cpp  **** 
 170:Src/main.cpp  **** 	/* USER CODE BEGIN 2 */
 171:Src/main.cpp  **** 	GPIO_InitTypeDef GPIO_InitStruct = {0};
 172:Src/main.cpp  **** 	GPIO_InitStruct.Pin = GPIO_PIN_1;
 173:Src/main.cpp  **** 	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 174:Src/main.cpp  **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
 175:Src/main.cpp  **** 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 176:Src/main.cpp  **** 	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 177:Src/main.cpp  **** 
 178:Src/main.cpp  **** 	HAL_UART_Receive_IT(&huart1, &rx_char, 1);
 179:Src/main.cpp  **** 
 180:Src/main.cpp  **** 	uint32_t last_tick = 0;
 181:Src/main.cpp  **** 	transmitting = 0;
 182:Src/main.cpp  **** 	command_received = 0;
 183:Src/main.cpp  **** 
 184:Src/main.cpp  **** 	//HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_data, 6);
 185:Src/main.cpp  **** 	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_data, 6);
 186:Src/main.cpp  **** 	/* USER CODE END 2 */
 187:Src/main.cpp  **** 
 188:Src/main.cpp  **** 
 189:Src/main.cpp  **** 
 190:Src/main.cpp  **** 	/* Infinite loop */
 191:Src/main.cpp  **** 	/* USER CODE BEGIN WHILE */
 192:Src/main.cpp  **** 	while (1)
 193:Src/main.cpp  **** 	{
 194:Src/main.cpp  **** 		if(HAL_GetTick()-last_tick > 1000)
 195:Src/main.cpp  **** 		{
 196:Src/main.cpp  **** 			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 197:Src/main.cpp  **** 			last_tick = HAL_GetTick();
 198:Src/main.cpp  **** 		}
 199:Src/main.cpp  **** 
 200:Src/main.cpp  **** 		if(command_received)
 201:Src/main.cpp  **** 		{
 202:Src/main.cpp  **** 			command_received = 0;
 203:Src/main.cpp  **** 			logger.eval(rx_buffer.buf);
 204:Src/main.cpp  **** 			rx_buffer.reset();
 205:Src/main.cpp  **** 		}
ARM GAS  /tmp/cc9h6Bqx.s 			page 5


 206:Src/main.cpp  **** 
 207:Src/main.cpp  **** 		uint8_t ph;
 208:Src/main.cpp  **** 		if(!transmitting) // esto se podría ver como un flush
 209:Src/main.cpp  **** 		{
 210:Src/main.cpp  **** 			if(tx_buffer.pop(&ph) == 0)
 211:Src/main.cpp  **** 			{
 212:Src/main.cpp  **** 				HAL_UART_Transmit_IT(&huart1, &ph, 1);
 213:Src/main.cpp  **** 				transmitting = 1;
 214:Src/main.cpp  **** 			}
 215:Src/main.cpp  **** 		}
 216:Src/main.cpp  **** 		/* USER CODE END WHILE */
 217:Src/main.cpp  **** 
 218:Src/main.cpp  **** 		/* USER CODE BEGIN 3 */
 219:Src/main.cpp  **** 	}
 220:Src/main.cpp  **** 	/* USER CODE END 3 */
 221:Src/main.cpp  **** }
 222:Src/main.cpp  **** 
 223:Src/main.cpp  **** /**
 224:Src/main.cpp  ****   * @brief System Clock Configuration
 225:Src/main.cpp  ****   * @retval None
 226:Src/main.cpp  ****   */
 227:Src/main.cpp  **** void SystemClock_Config(void)
 228:Src/main.cpp  **** {
 229:Src/main.cpp  **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 230:Src/main.cpp  **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 231:Src/main.cpp  **** 	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 232:Src/main.cpp  **** 
 233:Src/main.cpp  **** 	/** Initializes the CPU, AHB and APB busses clocks
 234:Src/main.cpp  **** 	*/
 235:Src/main.cpp  **** 	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 236:Src/main.cpp  **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 237:Src/main.cpp  **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 238:Src/main.cpp  **** 	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 239:Src/main.cpp  **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 240:Src/main.cpp  **** 	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 241:Src/main.cpp  **** 	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 242:Src/main.cpp  **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 243:Src/main.cpp  **** 	{
 244:Src/main.cpp  **** 		Error_Handler();
 245:Src/main.cpp  **** 	}
 246:Src/main.cpp  **** 	/** Initializes the CPU, AHB and APB busses clocks
 247:Src/main.cpp  **** 	*/
 248:Src/main.cpp  **** 	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 249:Src/main.cpp  **** 	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 250:Src/main.cpp  **** 	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 251:Src/main.cpp  **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 252:Src/main.cpp  **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 253:Src/main.cpp  **** 	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 254:Src/main.cpp  **** 
 255:Src/main.cpp  **** 	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 256:Src/main.cpp  **** 	{
 257:Src/main.cpp  **** 		Error_Handler();
 258:Src/main.cpp  **** 	}
 259:Src/main.cpp  **** 	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 260:Src/main.cpp  **** 	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 261:Src/main.cpp  **** 	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 262:Src/main.cpp  **** 	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
ARM GAS  /tmp/cc9h6Bqx.s 			page 6


 263:Src/main.cpp  **** 	{
 264:Src/main.cpp  **** 		Error_Handler();
 265:Src/main.cpp  **** 	}
 266:Src/main.cpp  **** }
 267:Src/main.cpp  **** 
 268:Src/main.cpp  **** /**
 269:Src/main.cpp  ****   * @brief ADC1 Initialization Function
 270:Src/main.cpp  ****   * @param None
 271:Src/main.cpp  ****   * @retval None
 272:Src/main.cpp  ****   */
 273:Src/main.cpp  **** static void MX_ADC1_Init(void)
 274:Src/main.cpp  **** {
 275:Src/main.cpp  **** 
 276:Src/main.cpp  **** 	/* USER CODE BEGIN ADC1_Init 0 */
 277:Src/main.cpp  **** 
 278:Src/main.cpp  **** 	/* USER CODE END ADC1_Init 0 */
 279:Src/main.cpp  **** 
 280:Src/main.cpp  **** 	ADC_ChannelConfTypeDef sConfig = {0};
 281:Src/main.cpp  **** 
 282:Src/main.cpp  **** 	/* USER CODE BEGIN ADC1_Init 1 */
 283:Src/main.cpp  **** 
 284:Src/main.cpp  **** 	/* USER CODE END ADC1_Init 1 */
 285:Src/main.cpp  **** 	/** Common config
 286:Src/main.cpp  **** 	*/
 287:Src/main.cpp  **** 	hadc1.Instance = ADC1;
 288:Src/main.cpp  **** 	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 289:Src/main.cpp  **** 	hadc1.Init.ContinuousConvMode = ENABLE;
 290:Src/main.cpp  **** 	hadc1.Init.DiscontinuousConvMode = DISABLE;
 291:Src/main.cpp  **** 	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 292:Src/main.cpp  **** 	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 293:Src/main.cpp  **** 	hadc1.Init.NbrOfConversion = 6;
 294:Src/main.cpp  **** 	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 295:Src/main.cpp  **** 	{
 296:Src/main.cpp  **** 		Error_Handler();
 297:Src/main.cpp  **** 	}
 298:Src/main.cpp  **** 	/** Configure Regular Channel
 299:Src/main.cpp  **** 	*/
 300:Src/main.cpp  **** 	sConfig.Channel = ADC_CHANNEL_8;
 301:Src/main.cpp  **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 302:Src/main.cpp  **** 	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 303:Src/main.cpp  **** 	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 304:Src/main.cpp  **** 	{
 305:Src/main.cpp  **** 		Error_Handler();
 306:Src/main.cpp  **** 	}
 307:Src/main.cpp  **** 	/** Configure Regular Channel
 308:Src/main.cpp  **** 	*/
 309:Src/main.cpp  **** 	sConfig.Channel = ADC_CHANNEL_9;
 310:Src/main.cpp  **** 	sConfig.Rank = ADC_REGULAR_RANK_2;
 311:Src/main.cpp  **** 	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 312:Src/main.cpp  **** 	{
 313:Src/main.cpp  **** 		Error_Handler();
 314:Src/main.cpp  **** 	}
 315:Src/main.cpp  **** 	/** Configure Regular Channel
 316:Src/main.cpp  **** 	*/
 317:Src/main.cpp  **** 	sConfig.Channel = ADC_CHANNEL_12;
 318:Src/main.cpp  **** 	sConfig.Rank = ADC_REGULAR_RANK_3;
 319:Src/main.cpp  **** 	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
ARM GAS  /tmp/cc9h6Bqx.s 			page 7


 320:Src/main.cpp  **** 	{
 321:Src/main.cpp  **** 		Error_Handler();
 322:Src/main.cpp  **** 	}
 323:Src/main.cpp  **** 	/** Configure Regular Channel
 324:Src/main.cpp  **** 	*/
 325:Src/main.cpp  **** 	sConfig.Channel = ADC_CHANNEL_13;
 326:Src/main.cpp  **** 	sConfig.Rank = ADC_REGULAR_RANK_4;
 327:Src/main.cpp  **** 	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 328:Src/main.cpp  **** 	{
 329:Src/main.cpp  **** 		Error_Handler();
 330:Src/main.cpp  **** 	}
 331:Src/main.cpp  **** 	/** Configure Regular Channel
 332:Src/main.cpp  **** 	*/
 333:Src/main.cpp  **** 	sConfig.Channel = ADC_CHANNEL_14;
 334:Src/main.cpp  **** 	sConfig.Rank = ADC_REGULAR_RANK_5;
 335:Src/main.cpp  **** 	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 336:Src/main.cpp  **** 	{
 337:Src/main.cpp  **** 		Error_Handler();
 338:Src/main.cpp  **** 	}
 339:Src/main.cpp  **** 	/** Configure Regular Channel
 340:Src/main.cpp  **** 	*/
 341:Src/main.cpp  **** 	sConfig.Channel = ADC_CHANNEL_15;
 342:Src/main.cpp  **** 	sConfig.Rank = ADC_REGULAR_RANK_6;
 343:Src/main.cpp  **** 	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 344:Src/main.cpp  **** 	{
 345:Src/main.cpp  **** 		Error_Handler();
 346:Src/main.cpp  **** 	}
 347:Src/main.cpp  **** 	/* USER CODE BEGIN ADC1_Init 2 */
 348:Src/main.cpp  **** 
 349:Src/main.cpp  **** 	/* USER CODE END ADC1_Init 2 */
 350:Src/main.cpp  **** 
 351:Src/main.cpp  **** }
 352:Src/main.cpp  **** 
 353:Src/main.cpp  **** /**
 354:Src/main.cpp  ****   * @brief ADC3 Initialization Function
 355:Src/main.cpp  ****   * @param None
 356:Src/main.cpp  ****   * @retval None
 357:Src/main.cpp  ****   */
 358:Src/main.cpp  **** static void MX_ADC3_Init(void)
 359:Src/main.cpp  **** {
 360:Src/main.cpp  **** 
 361:Src/main.cpp  **** 	/* USER CODE BEGIN ADC3_Init 0 */
 362:Src/main.cpp  **** 
 363:Src/main.cpp  **** 	/* USER CODE END ADC3_Init 0 */
 364:Src/main.cpp  **** 
 365:Src/main.cpp  **** 	ADC_ChannelConfTypeDef sConfig = {0};
 366:Src/main.cpp  **** 
 367:Src/main.cpp  **** 	/* USER CODE BEGIN ADC3_Init 1 */
 368:Src/main.cpp  **** 
 369:Src/main.cpp  **** 	/* USER CODE END ADC3_Init 1 */
 370:Src/main.cpp  **** 	/** Common config
 371:Src/main.cpp  **** 	*/
 372:Src/main.cpp  **** 	hadc3.Instance = ADC3;
 373:Src/main.cpp  **** 	hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 374:Src/main.cpp  **** 	hadc3.Init.ContinuousConvMode = ENABLE;
 375:Src/main.cpp  **** 	hadc3.Init.DiscontinuousConvMode = DISABLE;
 376:Src/main.cpp  **** 	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
ARM GAS  /tmp/cc9h6Bqx.s 			page 8


 377:Src/main.cpp  **** 	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 378:Src/main.cpp  **** 	hadc3.Init.NbrOfConversion = 6;
 379:Src/main.cpp  **** 	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 380:Src/main.cpp  **** 	{
 381:Src/main.cpp  **** 		Error_Handler();
 382:Src/main.cpp  **** 	}
 383:Src/main.cpp  **** 	/** Configure Regular Channel
 384:Src/main.cpp  **** 	*/
 385:Src/main.cpp  **** 	sConfig.Channel = ADC_CHANNEL_0;
 386:Src/main.cpp  **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 387:Src/main.cpp  **** 	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 388:Src/main.cpp  **** 	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 389:Src/main.cpp  **** 	{
 390:Src/main.cpp  **** 		Error_Handler();
 391:Src/main.cpp  **** 	}
 392:Src/main.cpp  **** 	/** Configure Regular Channel
 393:Src/main.cpp  **** 	*/
 394:Src/main.cpp  **** 	sConfig.Channel = ADC_CHANNEL_1;
 395:Src/main.cpp  **** 	sConfig.Rank = ADC_REGULAR_RANK_2;
 396:Src/main.cpp  **** 	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 397:Src/main.cpp  **** 	{
 398:Src/main.cpp  **** 		Error_Handler();
 399:Src/main.cpp  **** 	}
 400:Src/main.cpp  **** 	/** Configure Regular Channel
 401:Src/main.cpp  **** 	*/
 402:Src/main.cpp  **** 	sConfig.Channel = ADC_CHANNEL_2;
 403:Src/main.cpp  **** 	sConfig.Rank = ADC_REGULAR_RANK_3;
 404:Src/main.cpp  **** 	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 405:Src/main.cpp  **** 	{
 406:Src/main.cpp  **** 		Error_Handler();
 407:Src/main.cpp  **** 	}
 408:Src/main.cpp  **** 	/** Configure Regular Channel
 409:Src/main.cpp  **** 	*/
 410:Src/main.cpp  **** 	sConfig.Channel = ADC_CHANNEL_3;
 411:Src/main.cpp  **** 	sConfig.Rank = ADC_REGULAR_RANK_4;
 412:Src/main.cpp  **** 	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 413:Src/main.cpp  **** 	{
 414:Src/main.cpp  **** 		Error_Handler();
 415:Src/main.cpp  **** 	}
 416:Src/main.cpp  **** 	/** Configure Regular Channel
 417:Src/main.cpp  **** 	*/
 418:Src/main.cpp  **** 	sConfig.Channel = ADC_CHANNEL_10;
 419:Src/main.cpp  **** 	sConfig.Rank = ADC_REGULAR_RANK_5;
 420:Src/main.cpp  **** 	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 421:Src/main.cpp  **** 	{
 422:Src/main.cpp  **** 		Error_Handler();
 423:Src/main.cpp  **** 	}
 424:Src/main.cpp  **** 	/** Configure Regular Channel
 425:Src/main.cpp  **** 	*/
 426:Src/main.cpp  **** 	sConfig.Channel = ADC_CHANNEL_11;
 427:Src/main.cpp  **** 	sConfig.Rank = ADC_REGULAR_RANK_6;
 428:Src/main.cpp  **** 	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 429:Src/main.cpp  **** 	{
 430:Src/main.cpp  **** 		Error_Handler();
 431:Src/main.cpp  **** 	}
 432:Src/main.cpp  **** 	/* USER CODE BEGIN ADC3_Init 2 */
 433:Src/main.cpp  **** 
ARM GAS  /tmp/cc9h6Bqx.s 			page 9


 434:Src/main.cpp  **** 	/* USER CODE END ADC3_Init 2 */
 435:Src/main.cpp  **** }
 436:Src/main.cpp  **** 
 437:Src/main.cpp  **** /**
 438:Src/main.cpp  ****   * @brief DAC Initialization Function
 439:Src/main.cpp  ****   * @param None
 440:Src/main.cpp  ****   * @retval None
 441:Src/main.cpp  ****   */
 442:Src/main.cpp  **** static void MX_DAC_Init(void)
 443:Src/main.cpp  **** {
 444:Src/main.cpp  **** 
 445:Src/main.cpp  **** 	/* USER CODE BEGIN DAC_Init 0 */
 446:Src/main.cpp  **** 
 447:Src/main.cpp  **** 	/* USER CODE END DAC_Init 0 */
 448:Src/main.cpp  **** 
 449:Src/main.cpp  **** 	DAC_ChannelConfTypeDef sConfig = {0};
 450:Src/main.cpp  **** 
 451:Src/main.cpp  **** 	/* USER CODE BEGIN DAC_Init 1 */
 452:Src/main.cpp  **** 
 453:Src/main.cpp  **** 	/* USER CODE END DAC_Init 1 */
 454:Src/main.cpp  **** 	/** DAC Initialization
 455:Src/main.cpp  **** 	*/
 456:Src/main.cpp  **** 	hdac.Instance = DAC;
 457:Src/main.cpp  **** 	if (HAL_DAC_Init(&hdac) != HAL_OK)
 458:Src/main.cpp  **** 	{
 459:Src/main.cpp  **** 		Error_Handler();
 460:Src/main.cpp  **** 	}
 461:Src/main.cpp  **** 	/** DAC channel OUT1 config
 462:Src/main.cpp  **** 	*/
 463:Src/main.cpp  **** 	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 464:Src/main.cpp  **** 	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 465:Src/main.cpp  **** 	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 466:Src/main.cpp  **** 	{
 467:Src/main.cpp  **** 		Error_Handler();
 468:Src/main.cpp  **** 	}
 469:Src/main.cpp  **** 	/* USER CODE BEGIN DAC_Init 2 */
 470:Src/main.cpp  **** 
 471:Src/main.cpp  **** 	/* USER CODE END DAC_Init 2 */
 472:Src/main.cpp  **** 
 473:Src/main.cpp  **** }
 474:Src/main.cpp  **** 
 475:Src/main.cpp  **** /**
 476:Src/main.cpp  ****   * @brief I2C1 Initialization Function
 477:Src/main.cpp  ****   * @param None
 478:Src/main.cpp  ****   * @retval None
 479:Src/main.cpp  ****   */
 480:Src/main.cpp  **** static void MX_I2C1_Init(void)
 481:Src/main.cpp  **** {
 482:Src/main.cpp  **** 
 483:Src/main.cpp  **** 	/* USER CODE BEGIN I2C1_Init 0 */
 484:Src/main.cpp  **** 
 485:Src/main.cpp  **** 	/* USER CODE END I2C1_Init 0 */
 486:Src/main.cpp  **** 
 487:Src/main.cpp  **** 	/* USER CODE BEGIN I2C1_Init 1 */
 488:Src/main.cpp  **** 
 489:Src/main.cpp  **** 	/* USER CODE END I2C1_Init 1 */
 490:Src/main.cpp  **** 	hi2c1.Instance = I2C1;
ARM GAS  /tmp/cc9h6Bqx.s 			page 10


 491:Src/main.cpp  **** 	hi2c1.Init.ClockSpeed = 100000;
 492:Src/main.cpp  **** 	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 493:Src/main.cpp  **** 	hi2c1.Init.OwnAddress1 = 0;
 494:Src/main.cpp  **** 	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 495:Src/main.cpp  **** 	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 496:Src/main.cpp  **** 	hi2c1.Init.OwnAddress2 = 0;
 497:Src/main.cpp  **** 	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 498:Src/main.cpp  **** 	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 499:Src/main.cpp  **** 	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 500:Src/main.cpp  **** 	{
 501:Src/main.cpp  **** 		Error_Handler();
 502:Src/main.cpp  **** 	}
 503:Src/main.cpp  **** 	/* USER CODE BEGIN I2C1_Init 2 */
 504:Src/main.cpp  **** 
 505:Src/main.cpp  **** 	/* USER CODE END I2C1_Init 2 */
 506:Src/main.cpp  **** 
 507:Src/main.cpp  **** }
 508:Src/main.cpp  **** 
 509:Src/main.cpp  **** /**
 510:Src/main.cpp  ****   * @brief I2C2 Initialization Function
 511:Src/main.cpp  ****   * @param None
 512:Src/main.cpp  ****   * @retval None
 513:Src/main.cpp  ****   */
 514:Src/main.cpp  **** static void MX_I2C2_Init(void)
 515:Src/main.cpp  **** {
 516:Src/main.cpp  **** 
 517:Src/main.cpp  **** 	/* USER CODE BEGIN I2C2_Init 0 */
 518:Src/main.cpp  **** 
 519:Src/main.cpp  **** 	/* USER CODE END I2C2_Init 0 */
 520:Src/main.cpp  **** 
 521:Src/main.cpp  **** 	/* USER CODE BEGIN I2C2_Init 1 */
 522:Src/main.cpp  **** 
 523:Src/main.cpp  **** 	/* USER CODE END I2C2_Init 1 */
 524:Src/main.cpp  **** 	hi2c2.Instance = I2C2;
 525:Src/main.cpp  **** 	hi2c2.Init.ClockSpeed = 100000;
 526:Src/main.cpp  **** 	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 527:Src/main.cpp  **** 	hi2c2.Init.OwnAddress1 = 0;
 528:Src/main.cpp  **** 	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 529:Src/main.cpp  **** 	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 530:Src/main.cpp  **** 	hi2c2.Init.OwnAddress2 = 0;
 531:Src/main.cpp  **** 	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 532:Src/main.cpp  **** 	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 533:Src/main.cpp  **** 	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 534:Src/main.cpp  **** 	{
 535:Src/main.cpp  **** 		Error_Handler();
 536:Src/main.cpp  **** 	}
 537:Src/main.cpp  **** 	/* USER CODE BEGIN I2C2_Init 2 */
 538:Src/main.cpp  **** 
 539:Src/main.cpp  **** 	/* USER CODE END I2C2_Init 2 */
 540:Src/main.cpp  **** 
 541:Src/main.cpp  **** }
 542:Src/main.cpp  **** 
 543:Src/main.cpp  **** /**
 544:Src/main.cpp  ****   * @brief RTC Initialization Function
 545:Src/main.cpp  ****   * @param None
 546:Src/main.cpp  ****   * @retval None
 547:Src/main.cpp  ****   */
ARM GAS  /tmp/cc9h6Bqx.s 			page 11


 548:Src/main.cpp  **** static void MX_RTC_Init(void)
 549:Src/main.cpp  **** {
 550:Src/main.cpp  **** 
 551:Src/main.cpp  **** 	/* USER CODE BEGIN RTC_Init 0 */
 552:Src/main.cpp  **** 
 553:Src/main.cpp  **** 	/* USER CODE END RTC_Init 0 */
 554:Src/main.cpp  **** 
 555:Src/main.cpp  **** 	RTC_TimeTypeDef sTime = {0};
 556:Src/main.cpp  **** 	RTC_DateTypeDef DateToUpdate = {0};
 557:Src/main.cpp  **** 
 558:Src/main.cpp  **** 	/* USER CODE BEGIN RTC_Init 1 */
 559:Src/main.cpp  **** 
 560:Src/main.cpp  **** 	/* USER CODE END RTC_Init 1 */
 561:Src/main.cpp  **** 	/** Initialize RTC Only
 562:Src/main.cpp  **** 	*/
 563:Src/main.cpp  **** 	hrtc.Instance = RTC;
 564:Src/main.cpp  **** 	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 565:Src/main.cpp  **** 	hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 566:Src/main.cpp  **** 	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 567:Src/main.cpp  **** 	{
 568:Src/main.cpp  **** 		Error_Handler();
 569:Src/main.cpp  **** 	}
 570:Src/main.cpp  **** 
 571:Src/main.cpp  **** 	/* USER CODE BEGIN Check_RTC_BKUP */
 572:Src/main.cpp  **** 
 573:Src/main.cpp  **** 	/* USER CODE END Check_RTC_BKUP */
 574:Src/main.cpp  **** 
 575:Src/main.cpp  **** 	/** Initialize RTC and set the Time and Date
 576:Src/main.cpp  **** 	*/
 577:Src/main.cpp  **** 	sTime.Hours = 0x0;
 578:Src/main.cpp  **** 	sTime.Minutes = 0x0;
 579:Src/main.cpp  **** 	sTime.Seconds = 0x0;
 580:Src/main.cpp  **** 
 581:Src/main.cpp  **** 	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 582:Src/main.cpp  **** 	{
 583:Src/main.cpp  **** 		Error_Handler();
 584:Src/main.cpp  **** 	}
 585:Src/main.cpp  **** 	DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 586:Src/main.cpp  **** 	DateToUpdate.Month = RTC_MONTH_JANUARY;
 587:Src/main.cpp  **** 	DateToUpdate.Date = 0x1;
 588:Src/main.cpp  **** 	DateToUpdate.Year = 0x0;
 589:Src/main.cpp  **** 
 590:Src/main.cpp  **** 	if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 591:Src/main.cpp  **** 	{
 592:Src/main.cpp  **** 		Error_Handler();
 593:Src/main.cpp  **** 	}
 594:Src/main.cpp  **** 	/* USER CODE BEGIN RTC_Init 2 */
 595:Src/main.cpp  **** 
 596:Src/main.cpp  **** 	/* USER CODE END RTC_Init 2 */
 597:Src/main.cpp  **** 
 598:Src/main.cpp  **** }
 599:Src/main.cpp  **** 
 600:Src/main.cpp  **** /**
 601:Src/main.cpp  ****   * @brief SDIO Initialization Function
 602:Src/main.cpp  ****   * @param None
 603:Src/main.cpp  ****   * @retval None
 604:Src/main.cpp  ****   */
ARM GAS  /tmp/cc9h6Bqx.s 			page 12


 605:Src/main.cpp  **** static void MX_SDIO_SD_Init(void)
 606:Src/main.cpp  **** {
 607:Src/main.cpp  **** 
 608:Src/main.cpp  **** 	/* USER CODE BEGIN SDIO_Init 0 */
 609:Src/main.cpp  **** 
 610:Src/main.cpp  **** 	/* USER CODE END SDIO_Init 0 */
 611:Src/main.cpp  **** 
 612:Src/main.cpp  **** 	/* USER CODE BEGIN SDIO_Init 1 */
 613:Src/main.cpp  **** 
 614:Src/main.cpp  **** 	/* USER CODE END SDIO_Init 1 */
 615:Src/main.cpp  **** 	hsd.Instance = SDIO;
 616:Src/main.cpp  **** 	hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 617:Src/main.cpp  **** 	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 618:Src/main.cpp  **** 	hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 619:Src/main.cpp  **** 	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 620:Src/main.cpp  **** 	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 621:Src/main.cpp  **** 	hsd.Init.ClockDiv = 0;
 622:Src/main.cpp  **** 	if (HAL_SD_Init(&hsd) != HAL_OK)
 623:Src/main.cpp  **** 	{
 624:Src/main.cpp  **** 		Error_Handler();
 625:Src/main.cpp  **** 	}
 626:Src/main.cpp  **** 	if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 627:Src/main.cpp  **** 	{
 628:Src/main.cpp  **** 		Error_Handler();
 629:Src/main.cpp  **** 	}
 630:Src/main.cpp  **** 	/* USER CODE BEGIN SDIO_Init 2 */
 631:Src/main.cpp  **** 
 632:Src/main.cpp  **** 	/* USER CODE END SDIO_Init 2 */
 633:Src/main.cpp  **** 
 634:Src/main.cpp  **** }
 635:Src/main.cpp  **** 
 636:Src/main.cpp  **** /**
 637:Src/main.cpp  ****   * @brief SPI1 Initialization Function
 638:Src/main.cpp  ****   * @param None
 639:Src/main.cpp  ****   * @retval None
 640:Src/main.cpp  ****   */
 641:Src/main.cpp  **** static void MX_SPI1_Init(void)
 642:Src/main.cpp  **** {
 643:Src/main.cpp  **** 
 644:Src/main.cpp  **** 	/* USER CODE BEGIN SPI1_Init 0 */
 645:Src/main.cpp  **** 
 646:Src/main.cpp  **** 	/* USER CODE END SPI1_Init 0 */
 647:Src/main.cpp  **** 
 648:Src/main.cpp  **** 	/* USER CODE BEGIN SPI1_Init 1 */
 649:Src/main.cpp  **** 
 650:Src/main.cpp  **** 	/* USER CODE END SPI1_Init 1 */
 651:Src/main.cpp  **** 	/* SPI1 parameter configuration*/
 652:Src/main.cpp  **** 	hspi1.Instance = SPI1;
 653:Src/main.cpp  **** 	hspi1.Init.Mode = SPI_MODE_MASTER;
 654:Src/main.cpp  **** 	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 655:Src/main.cpp  **** 	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 656:Src/main.cpp  **** 	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 657:Src/main.cpp  **** 	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 658:Src/main.cpp  **** 	hspi1.Init.NSS = SPI_NSS_SOFT;
 659:Src/main.cpp  **** 	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 660:Src/main.cpp  **** 	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 661:Src/main.cpp  **** 	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
ARM GAS  /tmp/cc9h6Bqx.s 			page 13


 662:Src/main.cpp  **** 	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 663:Src/main.cpp  **** 	hspi1.Init.CRCPolynomial = 10;
 664:Src/main.cpp  **** 	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 665:Src/main.cpp  **** 	{
 666:Src/main.cpp  **** 		Error_Handler();
 667:Src/main.cpp  **** 	}
 668:Src/main.cpp  **** 	/* USER CODE BEGIN SPI1_Init 2 */
 669:Src/main.cpp  **** 
 670:Src/main.cpp  **** 	/* USER CODE END SPI1_Init 2 */
 671:Src/main.cpp  **** 
 672:Src/main.cpp  **** }
 673:Src/main.cpp  **** 
 674:Src/main.cpp  **** /**
 675:Src/main.cpp  ****   * @brief SPI2 Initialization Function
 676:Src/main.cpp  ****   * @param None
 677:Src/main.cpp  ****   * @retval None
 678:Src/main.cpp  ****   */
 679:Src/main.cpp  **** static void MX_SPI2_Init(void)
 680:Src/main.cpp  **** {
 681:Src/main.cpp  **** 
 682:Src/main.cpp  **** 	/* USER CODE BEGIN SPI2_Init 0 */
 683:Src/main.cpp  **** 
 684:Src/main.cpp  **** 	/* USER CODE END SPI2_Init 0 */
 685:Src/main.cpp  **** 
 686:Src/main.cpp  **** 	/* USER CODE BEGIN SPI2_Init 1 */
 687:Src/main.cpp  **** 
 688:Src/main.cpp  **** 	/* USER CODE END SPI2_Init 1 */
 689:Src/main.cpp  **** 	/* SPI2 parameter configuration*/
 690:Src/main.cpp  **** 	hspi2.Instance = SPI2;
 691:Src/main.cpp  **** 	hspi2.Init.Mode = SPI_MODE_MASTER;
 692:Src/main.cpp  **** 	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 693:Src/main.cpp  **** 	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 694:Src/main.cpp  **** 	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 695:Src/main.cpp  **** 	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 696:Src/main.cpp  **** 	hspi2.Init.NSS = SPI_NSS_SOFT;
 697:Src/main.cpp  **** 	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 698:Src/main.cpp  **** 	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 699:Src/main.cpp  **** 	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 700:Src/main.cpp  **** 	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 701:Src/main.cpp  **** 	hspi2.Init.CRCPolynomial = 10;
 702:Src/main.cpp  **** 	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 703:Src/main.cpp  **** 	{
 704:Src/main.cpp  **** 		Error_Handler();
 705:Src/main.cpp  **** 	}
 706:Src/main.cpp  **** 	/* USER CODE BEGIN SPI2_Init 2 */
 707:Src/main.cpp  **** 
 708:Src/main.cpp  **** 	/* USER CODE END SPI2_Init 2 */
 709:Src/main.cpp  **** 
 710:Src/main.cpp  **** }
 711:Src/main.cpp  **** 
 712:Src/main.cpp  **** /**
 713:Src/main.cpp  ****   * @brief SPI3 Initialization Function
 714:Src/main.cpp  ****   * @param None
 715:Src/main.cpp  ****   * @retval None
 716:Src/main.cpp  ****   */
 717:Src/main.cpp  **** static void MX_SPI3_Init(void)
 718:Src/main.cpp  **** {
ARM GAS  /tmp/cc9h6Bqx.s 			page 14


 719:Src/main.cpp  **** 
 720:Src/main.cpp  **** 	/* USER CODE BEGIN SPI3_Init 0 */
 721:Src/main.cpp  **** 
 722:Src/main.cpp  **** 	/* USER CODE END SPI3_Init 0 */
 723:Src/main.cpp  **** 
 724:Src/main.cpp  **** 	/* USER CODE BEGIN SPI3_Init 1 */
 725:Src/main.cpp  **** 
 726:Src/main.cpp  **** 	/* USER CODE END SPI3_Init 1 */
 727:Src/main.cpp  **** 	/* SPI3 parameter configuration*/
 728:Src/main.cpp  **** 	hspi3.Instance = SPI3;
 729:Src/main.cpp  **** 	hspi3.Init.Mode = SPI_MODE_MASTER;
 730:Src/main.cpp  **** 	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 731:Src/main.cpp  **** 	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 732:Src/main.cpp  **** 	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 733:Src/main.cpp  **** 	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 734:Src/main.cpp  **** 	hspi3.Init.NSS = SPI_NSS_SOFT;
 735:Src/main.cpp  **** 	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 736:Src/main.cpp  **** 	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 737:Src/main.cpp  **** 	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 738:Src/main.cpp  **** 	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 739:Src/main.cpp  **** 	hspi3.Init.CRCPolynomial = 10;
 740:Src/main.cpp  **** 	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 741:Src/main.cpp  **** 	{
 742:Src/main.cpp  **** 		Error_Handler();
 743:Src/main.cpp  **** 	}
 744:Src/main.cpp  **** 	/* USER CODE BEGIN SPI3_Init 2 */
 745:Src/main.cpp  **** 
 746:Src/main.cpp  **** 	/* USER CODE END SPI3_Init 2 */
 747:Src/main.cpp  **** 
 748:Src/main.cpp  **** }
 749:Src/main.cpp  **** 
 750:Src/main.cpp  **** /**
 751:Src/main.cpp  ****   * @brief TIM1 Initialization Function
 752:Src/main.cpp  ****   * @param None
 753:Src/main.cpp  ****   * @retval None
 754:Src/main.cpp  ****   */
 755:Src/main.cpp  **** static void MX_TIM1_Init(void)
 756:Src/main.cpp  **** {
 757:Src/main.cpp  **** 
 758:Src/main.cpp  **** 	/* USER CODE BEGIN TIM1_Init 0 */
 759:Src/main.cpp  **** 
 760:Src/main.cpp  **** 	/* USER CODE END TIM1_Init 0 */
 761:Src/main.cpp  **** 
 762:Src/main.cpp  **** 	TIM_MasterConfigTypeDef sMasterConfig = {0};
 763:Src/main.cpp  **** 	TIM_OC_InitTypeDef sConfigOC = {0};
 764:Src/main.cpp  **** 	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 765:Src/main.cpp  **** 
 766:Src/main.cpp  **** 	/* USER CODE BEGIN TIM1_Init 1 */
 767:Src/main.cpp  **** 
 768:Src/main.cpp  **** 	/* USER CODE END TIM1_Init 1 */
 769:Src/main.cpp  **** 	htim1.Instance = TIM1;
 770:Src/main.cpp  **** 	htim1.Init.Prescaler = 0;
 771:Src/main.cpp  **** 	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 772:Src/main.cpp  **** 	htim1.Init.Period = 0;
 773:Src/main.cpp  **** 	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 774:Src/main.cpp  **** 	htim1.Init.RepetitionCounter = 0;
 775:Src/main.cpp  **** 	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
ARM GAS  /tmp/cc9h6Bqx.s 			page 15


 776:Src/main.cpp  **** 	if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 777:Src/main.cpp  **** 	{
 778:Src/main.cpp  **** 		Error_Handler();
 779:Src/main.cpp  **** 	}
 780:Src/main.cpp  **** 	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 781:Src/main.cpp  **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 782:Src/main.cpp  **** 	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 783:Src/main.cpp  **** 	{
 784:Src/main.cpp  **** 		Error_Handler();
 785:Src/main.cpp  **** 	}
 786:Src/main.cpp  **** 	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 787:Src/main.cpp  **** 	sConfigOC.Pulse = 0;
 788:Src/main.cpp  **** 	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 789:Src/main.cpp  **** 	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 790:Src/main.cpp  **** 	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 791:Src/main.cpp  **** 	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 792:Src/main.cpp  **** 	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 793:Src/main.cpp  **** 	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 794:Src/main.cpp  **** 	{
 795:Src/main.cpp  **** 		Error_Handler();
 796:Src/main.cpp  **** 	}
 797:Src/main.cpp  **** 	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 798:Src/main.cpp  **** 	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 799:Src/main.cpp  **** 	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800:Src/main.cpp  **** 	sBreakDeadTimeConfig.DeadTime = 0;
 801:Src/main.cpp  **** 	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 802:Src/main.cpp  **** 	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 803:Src/main.cpp  **** 	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 804:Src/main.cpp  **** 	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 805:Src/main.cpp  **** 	{
 806:Src/main.cpp  **** 		Error_Handler();
 807:Src/main.cpp  **** 	}
 808:Src/main.cpp  **** 	/* USER CODE BEGIN TIM1_Init 2 */
 809:Src/main.cpp  **** 
 810:Src/main.cpp  **** 	/* USER CODE END TIM1_Init 2 */
 811:Src/main.cpp  **** 	HAL_TIM_MspPostInit(&htim1);
 812:Src/main.cpp  **** 
 813:Src/main.cpp  **** }
 814:Src/main.cpp  **** 
 815:Src/main.cpp  **** /**
 816:Src/main.cpp  ****   * @brief TIM2 Initialization Function
 817:Src/main.cpp  ****   * @param None
 818:Src/main.cpp  ****   * @retval None
 819:Src/main.cpp  ****   */
 820:Src/main.cpp  **** static void MX_TIM2_Init(void)
 821:Src/main.cpp  **** {
 822:Src/main.cpp  **** 
 823:Src/main.cpp  **** 	/* USER CODE BEGIN TIM2_Init 0 */
 824:Src/main.cpp  **** 
 825:Src/main.cpp  **** 	/* USER CODE END TIM2_Init 0 */
 826:Src/main.cpp  **** 
 827:Src/main.cpp  **** 	TIM_MasterConfigTypeDef sMasterConfig = {0};
 828:Src/main.cpp  **** 	TIM_OC_InitTypeDef sConfigOC = {0};
 829:Src/main.cpp  **** 
 830:Src/main.cpp  **** 	/* USER CODE BEGIN TIM2_Init 1 */
 831:Src/main.cpp  **** 
 832:Src/main.cpp  **** 	/* USER CODE END TIM2_Init 1 */
ARM GAS  /tmp/cc9h6Bqx.s 			page 16


 833:Src/main.cpp  **** 	htim2.Instance = TIM2;
 834:Src/main.cpp  **** 	htim2.Init.Prescaler = 0;
 835:Src/main.cpp  **** 	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 836:Src/main.cpp  **** 	htim2.Init.Period = 0;
 837:Src/main.cpp  **** 	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 838:Src/main.cpp  **** 	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 839:Src/main.cpp  **** 	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 840:Src/main.cpp  **** 	{
 841:Src/main.cpp  **** 		Error_Handler();
 842:Src/main.cpp  **** 	}
 843:Src/main.cpp  **** 	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 844:Src/main.cpp  **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 845:Src/main.cpp  **** 	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 846:Src/main.cpp  **** 	{
 847:Src/main.cpp  **** 		Error_Handler();
 848:Src/main.cpp  **** 	}
 849:Src/main.cpp  **** 	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 850:Src/main.cpp  **** 	sConfigOC.Pulse = 0;
 851:Src/main.cpp  **** 	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 852:Src/main.cpp  **** 	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 853:Src/main.cpp  **** 	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 854:Src/main.cpp  **** 	{
 855:Src/main.cpp  **** 		Error_Handler();
 856:Src/main.cpp  **** 	}
 857:Src/main.cpp  **** 	/* USER CODE BEGIN TIM2_Init 2 */
 858:Src/main.cpp  **** 
 859:Src/main.cpp  **** 	/* USER CODE END TIM2_Init 2 */
 860:Src/main.cpp  **** 	HAL_TIM_MspPostInit(&htim2);
 861:Src/main.cpp  **** 
 862:Src/main.cpp  **** }
 863:Src/main.cpp  **** 
 864:Src/main.cpp  **** /**
 865:Src/main.cpp  ****   * @brief TIM3 Initialization Function
 866:Src/main.cpp  ****   * @param None
 867:Src/main.cpp  ****   * @retval None
 868:Src/main.cpp  ****   */
 869:Src/main.cpp  **** static void MX_TIM3_Init(void)
 870:Src/main.cpp  **** {
 871:Src/main.cpp  **** 
 872:Src/main.cpp  **** 	/* USER CODE BEGIN TIM3_Init 0 */
 873:Src/main.cpp  **** 
 874:Src/main.cpp  **** 	/* USER CODE END TIM3_Init 0 */
 875:Src/main.cpp  **** 
 876:Src/main.cpp  **** 	TIM_MasterConfigTypeDef sMasterConfig = {0};
 877:Src/main.cpp  **** 	TIM_OC_InitTypeDef sConfigOC = {0};
 878:Src/main.cpp  **** 
 879:Src/main.cpp  **** 	/* USER CODE BEGIN TIM3_Init 1 */
 880:Src/main.cpp  **** 
 881:Src/main.cpp  **** 	/* USER CODE END TIM3_Init 1 */
 882:Src/main.cpp  **** 	htim3.Instance = TIM3;
 883:Src/main.cpp  **** 	htim3.Init.Prescaler = 0;
 884:Src/main.cpp  **** 	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 885:Src/main.cpp  **** 	htim3.Init.Period = 0;
 886:Src/main.cpp  **** 	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 887:Src/main.cpp  **** 	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 888:Src/main.cpp  **** 	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 889:Src/main.cpp  **** 	{
ARM GAS  /tmp/cc9h6Bqx.s 			page 17


 890:Src/main.cpp  **** 		Error_Handler();
 891:Src/main.cpp  **** 	}
 892:Src/main.cpp  **** 	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 893:Src/main.cpp  **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 894:Src/main.cpp  **** 	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 895:Src/main.cpp  **** 	{
 896:Src/main.cpp  **** 		Error_Handler();
 897:Src/main.cpp  **** 	}
 898:Src/main.cpp  **** 	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 899:Src/main.cpp  **** 	sConfigOC.Pulse = 0;
 900:Src/main.cpp  **** 	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 901:Src/main.cpp  **** 	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 902:Src/main.cpp  **** 	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 903:Src/main.cpp  **** 	{
 904:Src/main.cpp  **** 		Error_Handler();
 905:Src/main.cpp  **** 	}
 906:Src/main.cpp  **** 	/* USER CODE BEGIN TIM3_Init 2 */
 907:Src/main.cpp  **** 
 908:Src/main.cpp  **** 	/* USER CODE END TIM3_Init 2 */
 909:Src/main.cpp  **** 	HAL_TIM_MspPostInit(&htim3);
 910:Src/main.cpp  **** 
 911:Src/main.cpp  **** }
 912:Src/main.cpp  **** 
 913:Src/main.cpp  **** /**
 914:Src/main.cpp  ****   * @brief TIM4 Initialization Function
 915:Src/main.cpp  ****   * @param None
 916:Src/main.cpp  ****   * @retval None
 917:Src/main.cpp  ****   */
 918:Src/main.cpp  **** static void MX_TIM4_Init(void)
 919:Src/main.cpp  **** {
 920:Src/main.cpp  **** 
 921:Src/main.cpp  **** 	/* USER CODE BEGIN TIM4_Init 0 */
 922:Src/main.cpp  **** 
 923:Src/main.cpp  **** 	/* USER CODE END TIM4_Init 0 */
 924:Src/main.cpp  **** 
 925:Src/main.cpp  **** 	TIM_MasterConfigTypeDef sMasterConfig = {0};
 926:Src/main.cpp  **** 	TIM_OC_InitTypeDef sConfigOC = {0};
 927:Src/main.cpp  **** 
 928:Src/main.cpp  **** 	/* USER CODE BEGIN TIM4_Init 1 */
 929:Src/main.cpp  **** 
 930:Src/main.cpp  **** 	/* USER CODE END TIM4_Init 1 */
 931:Src/main.cpp  **** 	htim4.Instance = TIM4;
 932:Src/main.cpp  **** 	htim4.Init.Prescaler = 0;
 933:Src/main.cpp  **** 	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 934:Src/main.cpp  **** 	htim4.Init.Period = 0;
 935:Src/main.cpp  **** 	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 936:Src/main.cpp  **** 	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 937:Src/main.cpp  **** 	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 938:Src/main.cpp  **** 	{
 939:Src/main.cpp  **** 		Error_Handler();
 940:Src/main.cpp  **** 	}
 941:Src/main.cpp  **** 	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 942:Src/main.cpp  **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 943:Src/main.cpp  **** 	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 944:Src/main.cpp  **** 	{
 945:Src/main.cpp  **** 		Error_Handler();
 946:Src/main.cpp  **** 	}
ARM GAS  /tmp/cc9h6Bqx.s 			page 18


 947:Src/main.cpp  **** 	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 948:Src/main.cpp  **** 	sConfigOC.Pulse = 0;
 949:Src/main.cpp  **** 	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 950:Src/main.cpp  **** 	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 951:Src/main.cpp  **** 	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 952:Src/main.cpp  **** 	{
 953:Src/main.cpp  **** 		Error_Handler();
 954:Src/main.cpp  **** 	}
 955:Src/main.cpp  **** 	/* USER CODE BEGIN TIM4_Init 2 */
 956:Src/main.cpp  **** 
 957:Src/main.cpp  **** 	/* USER CODE END TIM4_Init 2 */
 958:Src/main.cpp  **** 	HAL_TIM_MspPostInit(&htim4);
 959:Src/main.cpp  **** 
 960:Src/main.cpp  **** }
 961:Src/main.cpp  **** 
 962:Src/main.cpp  **** /**
 963:Src/main.cpp  ****   * @brief USART1 Initialization Function
 964:Src/main.cpp  ****   * @param None
 965:Src/main.cpp  ****   * @retval None
 966:Src/main.cpp  ****   */
 967:Src/main.cpp  **** static void MX_USART1_UART_Init(void)
 968:Src/main.cpp  **** {
 969:Src/main.cpp  **** 
 970:Src/main.cpp  **** 	/* USER CODE BEGIN USART1_Init 0 */
 971:Src/main.cpp  **** 
 972:Src/main.cpp  **** 	/* USER CODE END USART1_Init 0 */
 973:Src/main.cpp  **** 
 974:Src/main.cpp  **** 	/* USER CODE BEGIN USART1_Init 1 */
 975:Src/main.cpp  **** 
 976:Src/main.cpp  **** 	/* USER CODE END USART1_Init 1 */
 977:Src/main.cpp  **** 	huart1.Instance = USART1;
 978:Src/main.cpp  **** 	huart1.Init.BaudRate = 115200;
 979:Src/main.cpp  **** 	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 980:Src/main.cpp  **** 	huart1.Init.StopBits = UART_STOPBITS_1;
 981:Src/main.cpp  **** 	huart1.Init.Parity = UART_PARITY_NONE;
 982:Src/main.cpp  **** 	huart1.Init.Mode = UART_MODE_TX_RX;
 983:Src/main.cpp  **** 	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 984:Src/main.cpp  **** 	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 985:Src/main.cpp  **** 	if (HAL_UART_Init(&huart1) != HAL_OK)
 986:Src/main.cpp  **** 	{
 987:Src/main.cpp  **** 		Error_Handler();
 988:Src/main.cpp  **** 	}
 989:Src/main.cpp  **** 
 990:Src/main.cpp  **** 
 991:Src/main.cpp  **** 	/* USER CODE BEGIN USART1_Init 2 */
 992:Src/main.cpp  **** 	/* USER CODE END USART1_Init 2 */
 993:Src/main.cpp  **** 
 994:Src/main.cpp  **** }
 995:Src/main.cpp  **** 
 996:Src/main.cpp  **** /**
 997:Src/main.cpp  ****   * @brief USART2 Initialization Function
 998:Src/main.cpp  ****   * @param None
 999:Src/main.cpp  ****   * @retval None
1000:Src/main.cpp  ****   */
1001:Src/main.cpp  **** static void MX_USART2_UART_Init(void)
1002:Src/main.cpp  **** {
1003:Src/main.cpp  **** 
ARM GAS  /tmp/cc9h6Bqx.s 			page 19


1004:Src/main.cpp  **** 	/* USER CODE BEGIN USART2_Init 0 */
1005:Src/main.cpp  **** 
1006:Src/main.cpp  **** 	/* USER CODE END USART2_Init 0 */
1007:Src/main.cpp  **** 
1008:Src/main.cpp  **** 	/* USER CODE BEGIN USART2_Init 1 */
1009:Src/main.cpp  **** 
1010:Src/main.cpp  **** 	/* USER CODE END USART2_Init 1 */
1011:Src/main.cpp  **** 	huart2.Instance = USART2;
1012:Src/main.cpp  **** 	huart2.Init.BaudRate = 115200;
1013:Src/main.cpp  **** 	huart2.Init.WordLength = UART_WORDLENGTH_8B;
1014:Src/main.cpp  **** 	huart2.Init.StopBits = UART_STOPBITS_1;
1015:Src/main.cpp  **** 	huart2.Init.Parity = UART_PARITY_NONE;
1016:Src/main.cpp  **** 	huart2.Init.Mode = UART_MODE_TX_RX;
1017:Src/main.cpp  **** 	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
1018:Src/main.cpp  **** 	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
1019:Src/main.cpp  **** 	if (HAL_UART_Init(&huart2) != HAL_OK)
1020:Src/main.cpp  **** 	{
1021:Src/main.cpp  **** 		Error_Handler();
1022:Src/main.cpp  **** 	}
1023:Src/main.cpp  **** 	/* USER CODE BEGIN USART2_Init 2 */
1024:Src/main.cpp  **** 
1025:Src/main.cpp  **** 	/* USER CODE END USART2_Init 2 */
1026:Src/main.cpp  **** 
1027:Src/main.cpp  **** }
1028:Src/main.cpp  **** 
1029:Src/main.cpp  **** /**
1030:Src/main.cpp  ****   * @brief USART3 Initialization Function
1031:Src/main.cpp  ****   * @param None
1032:Src/main.cpp  ****   * @retval None
1033:Src/main.cpp  ****   */
1034:Src/main.cpp  **** static void MX_USART3_UART_Init(void)
1035:Src/main.cpp  **** {
1036:Src/main.cpp  **** 
1037:Src/main.cpp  **** 	/* USER CODE BEGIN USART3_Init 0 */
1038:Src/main.cpp  **** 
1039:Src/main.cpp  **** 	/* USER CODE END USART3_Init 0 */
1040:Src/main.cpp  **** 
1041:Src/main.cpp  **** 	/* USER CODE BEGIN USART3_Init 1 */
1042:Src/main.cpp  **** 
1043:Src/main.cpp  **** 	/* USER CODE END USART3_Init 1 */
1044:Src/main.cpp  **** 	huart3.Instance = USART3;
1045:Src/main.cpp  **** 	huart3.Init.BaudRate = 115200;
1046:Src/main.cpp  **** 	huart3.Init.WordLength = UART_WORDLENGTH_8B;
1047:Src/main.cpp  **** 	huart3.Init.StopBits = UART_STOPBITS_1;
1048:Src/main.cpp  **** 	huart3.Init.Parity = UART_PARITY_NONE;
1049:Src/main.cpp  **** 	huart3.Init.Mode = UART_MODE_TX_RX;
1050:Src/main.cpp  **** 	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
1051:Src/main.cpp  **** 	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
1052:Src/main.cpp  **** 	if (HAL_UART_Init(&huart3) != HAL_OK)
1053:Src/main.cpp  **** 	{
1054:Src/main.cpp  **** 		Error_Handler();
1055:Src/main.cpp  **** 	}
1056:Src/main.cpp  **** 	/* USER CODE BEGIN USART3_Init 2 */
1057:Src/main.cpp  **** 
1058:Src/main.cpp  **** 	/* USER CODE END USART3_Init 2 */
1059:Src/main.cpp  **** 
1060:Src/main.cpp  **** }
ARM GAS  /tmp/cc9h6Bqx.s 			page 20


1061:Src/main.cpp  **** 
1062:Src/main.cpp  **** /**
1063:Src/main.cpp  ****   * Enable DMA controller clock
1064:Src/main.cpp  ****   */
1065:Src/main.cpp  **** static void MX_DMA_Init(void)
1066:Src/main.cpp  **** {
1067:Src/main.cpp  **** 
1068:Src/main.cpp  **** 	/* DMA controller clock enable */
1069:Src/main.cpp  **** 	__HAL_RCC_DMA1_CLK_ENABLE();
1070:Src/main.cpp  **** 
1071:Src/main.cpp  **** 	/* DMA interrupt init */
1072:Src/main.cpp  **** 	/* DMA1_Channel2_IRQn interrupt configuration */
1073:Src/main.cpp  **** 	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
1074:Src/main.cpp  **** 	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
1075:Src/main.cpp  **** 	/* DMA1_Channel3_IRQn interrupt configuration */
1076:Src/main.cpp  **** 	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
1077:Src/main.cpp  **** 	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
1078:Src/main.cpp  **** 	/* DMA1_Channel4_IRQn interrupt configuration */
1079:Src/main.cpp  **** 	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
1080:Src/main.cpp  **** 	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
1081:Src/main.cpp  **** 	/* DMA1_Channel6_IRQn interrupt configuration */
1082:Src/main.cpp  **** 	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
1083:Src/main.cpp  **** 	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
1084:Src/main.cpp  **** 	/* DMA1_Channel7_IRQn interrupt configuration */
1085:Src/main.cpp  **** 	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
1086:Src/main.cpp  **** 	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
1087:Src/main.cpp  **** 
1088:Src/main.cpp  **** }
1089:Src/main.cpp  **** 
1090:Src/main.cpp  **** /**
1091:Src/main.cpp  ****   * @brief GPIO Initialization Function
1092:Src/main.cpp  ****   * @param None
1093:Src/main.cpp  ****   * @retval None
1094:Src/main.cpp  ****   */
1095:Src/main.cpp  **** static void MX_GPIO_Init(void)
1096:Src/main.cpp  **** {
  25              		.loc 1 1096 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 40
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 36
  32              		.cfi_offset 4, -36
  33              		.cfi_offset 5, -32
  34              		.cfi_offset 6, -28
  35              		.cfi_offset 7, -24
  36              		.cfi_offset 8, -20
  37              		.cfi_offset 9, -16
  38              		.cfi_offset 10, -12
  39              		.cfi_offset 11, -8
  40              		.cfi_offset 14, -4
  41 0004 8BB0     		sub	sp, sp, #44
  42              	.LCFI1:
  43              		.cfi_def_cfa_offset 80
1097:Src/main.cpp  **** 	GPIO_InitTypeDef GPIO_InitStruct = {0};
  44              		.loc 1 1097 0
ARM GAS  /tmp/cc9h6Bqx.s 			page 21


  45 0006 0024     		movs	r4, #0
  46 0008 0694     		str	r4, [sp, #24]
  47 000a 0794     		str	r4, [sp, #28]
  48 000c 0894     		str	r4, [sp, #32]
  49 000e 0994     		str	r4, [sp, #36]
  50              	.LBB32:
1098:Src/main.cpp  **** 
1099:Src/main.cpp  **** 	/* GPIO Ports Clock Enable */
1100:Src/main.cpp  **** 	__HAL_RCC_GPIOE_CLK_ENABLE();
  51              		.loc 1 1100 0
  52 0010 554B     		ldr	r3, .L3
  53 0012 9A69     		ldr	r2, [r3, #24]
  54 0014 42F04002 		orr	r2, r2, #64
  55 0018 9A61     		str	r2, [r3, #24]
  56 001a 9A69     		ldr	r2, [r3, #24]
  57 001c 02F04002 		and	r2, r2, #64
  58 0020 0192     		str	r2, [sp, #4]
  59 0022 019A     		ldr	r2, [sp, #4]
  60              	.LBE32:
  61              	.LBB33:
1101:Src/main.cpp  **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
  62              		.loc 1 1101 0
  63 0024 9A69     		ldr	r2, [r3, #24]
  64 0026 42F01002 		orr	r2, r2, #16
  65 002a 9A61     		str	r2, [r3, #24]
  66 002c 9A69     		ldr	r2, [r3, #24]
  67 002e 02F01002 		and	r2, r2, #16
  68 0032 0292     		str	r2, [sp, #8]
  69 0034 029A     		ldr	r2, [sp, #8]
  70              	.LBE33:
  71              	.LBB34:
1102:Src/main.cpp  **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
  72              		.loc 1 1102 0
  73 0036 9A69     		ldr	r2, [r3, #24]
  74 0038 42F00402 		orr	r2, r2, #4
  75 003c 9A61     		str	r2, [r3, #24]
  76 003e 9A69     		ldr	r2, [r3, #24]
  77 0040 02F00402 		and	r2, r2, #4
  78 0044 0392     		str	r2, [sp, #12]
  79 0046 039A     		ldr	r2, [sp, #12]
  80              	.LBE34:
  81              	.LBB35:
1103:Src/main.cpp  **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
  82              		.loc 1 1103 0
  83 0048 9A69     		ldr	r2, [r3, #24]
  84 004a 42F00802 		orr	r2, r2, #8
  85 004e 9A61     		str	r2, [r3, #24]
  86 0050 9A69     		ldr	r2, [r3, #24]
  87 0052 02F00802 		and	r2, r2, #8
  88 0056 0492     		str	r2, [sp, #16]
  89 0058 049A     		ldr	r2, [sp, #16]
  90              	.LBE35:
  91              	.LBB36:
1104:Src/main.cpp  **** 	__HAL_RCC_GPIOD_CLK_ENABLE();
  92              		.loc 1 1104 0
  93 005a 9A69     		ldr	r2, [r3, #24]
  94 005c 42F02002 		orr	r2, r2, #32
ARM GAS  /tmp/cc9h6Bqx.s 			page 22


  95 0060 9A61     		str	r2, [r3, #24]
  96 0062 9B69     		ldr	r3, [r3, #24]
  97 0064 03F02003 		and	r3, r3, #32
  98 0068 0593     		str	r3, [sp, #20]
  99 006a 059B     		ldr	r3, [sp, #20]
 100              	.LBE36:
1105:Src/main.cpp  **** 
1106:Src/main.cpp  **** 	/*Configure GPIO pin Output Level */
1107:Src/main.cpp  **** 	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_12, GPIO_PIN_RESET);
 101              		.loc 1 1107 0
 102 006c 3F4F     		ldr	r7, .L3+4
 103 006e 2246     		mov	r2, r4
 104 0070 41F20401 		movw	r1, #4100
 105 0074 3846     		mov	r0, r7
 106 0076 FFF7FEFF 		bl	HAL_GPIO_WritePin
 107              	.LVL0:
1108:Src/main.cpp  **** 
1109:Src/main.cpp  **** 	/*Configure GPIO pin Output Level */
1110:Src/main.cpp  **** 	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11
1111:Src/main.cpp  **** 	                  |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 108              		.loc 1 1111 0
 109 007a DFF8F4A0 		ldr	r10, .L3+8
 110 007e 2246     		mov	r2, r4
 111 0080 4FF68051 		movw	r1, #64896
 112 0084 5046     		mov	r0, r10
 113 0086 FFF7FEFF 		bl	HAL_GPIO_WritePin
 114              	.LVL1:
1112:Src/main.cpp  **** 
1113:Src/main.cpp  **** 	/*Configure GPIO pin Output Level */
1114:Src/main.cpp  **** 	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14
1115:Src/main.cpp  **** 	                  |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 115              		.loc 1 1115 0
 116 008a DFF8E880 		ldr	r8, .L3+12
 117 008e 2246     		mov	r2, r4
 118 0090 4EF60B41 		movw	r1, #60427
 119 0094 4046     		mov	r0, r8
 120 0096 FFF7FEFF 		bl	HAL_GPIO_WritePin
 121              	.LVL2:
1116:Src/main.cpp  **** 
1117:Src/main.cpp  **** 	/*Configure GPIO pin Output Level */
1118:Src/main.cpp  **** 	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 122              		.loc 1 1118 0
 123 009a DFF8DC90 		ldr	r9, .L3+16
 124 009e 2246     		mov	r2, r4
 125 00a0 8021     		movs	r1, #128
 126 00a2 4846     		mov	r0, r9
 127 00a4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 128              	.LVL3:
1119:Src/main.cpp  **** 
1120:Src/main.cpp  **** 	/*Configure GPIO pin Output Level */
1121:Src/main.cpp  **** 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 129              		.loc 1 1121 0
 130 00a8 DFF8D0B0 		ldr	fp, .L3+20
 131 00ac 2246     		mov	r2, r4
 132 00ae 4FF48071 		mov	r1, #256
 133 00b2 5846     		mov	r0, fp
 134 00b4 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/cc9h6Bqx.s 			page 23


 135              	.LVL4:
1122:Src/main.cpp  **** 
1123:Src/main.cpp  **** 	/*Configure GPIO pins : PE2 PE3 PE4 PE5
1124:Src/main.cpp  **** 	                         PE6 PE0 PE1 */
1125:Src/main.cpp  **** 	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 136              		.loc 1 1125 0
 137 00b8 7F23     		movs	r3, #127
 138 00ba 0693     		str	r3, [sp, #24]
1126:Src/main.cpp  **** 	                      |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1;
1127:Src/main.cpp  **** 	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 139              		.loc 1 1127 0
 140 00bc 0794     		str	r4, [sp, #28]
1128:Src/main.cpp  **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
 141              		.loc 1 1128 0
 142 00be 0894     		str	r4, [sp, #32]
1129:Src/main.cpp  **** 	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 143              		.loc 1 1129 0
 144 00c0 06A9     		add	r1, sp, #24
 145 00c2 5046     		mov	r0, r10
 146 00c4 FFF7FEFF 		bl	HAL_GPIO_Init
 147              	.LVL5:
1130:Src/main.cpp  **** 
1131:Src/main.cpp  **** 	/*Configure GPIO pins : PC13 PC14 PC15 */
1132:Src/main.cpp  **** 	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 148              		.loc 1 1132 0
 149 00c8 4FF46043 		mov	r3, #57344
 150 00cc 0693     		str	r3, [sp, #24]
1133:Src/main.cpp  **** 	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 151              		.loc 1 1133 0
 152 00ce 0794     		str	r4, [sp, #28]
1134:Src/main.cpp  **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
 153              		.loc 1 1134 0
 154 00d0 0894     		str	r4, [sp, #32]
1135:Src/main.cpp  **** 	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 155              		.loc 1 1135 0
 156 00d2 06A9     		add	r1, sp, #24
 157 00d4 4846     		mov	r0, r9
 158 00d6 FFF7FEFF 		bl	HAL_GPIO_Init
 159              	.LVL6:
1136:Src/main.cpp  **** 
1137:Src/main.cpp  **** 	/*Configure GPIO pins : PB2 PB12 */
1138:Src/main.cpp  **** 	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 160              		.loc 1 1138 0
 161 00da 41F20403 		movw	r3, #4100
 162 00de 0693     		str	r3, [sp, #24]
1139:Src/main.cpp  **** 	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 163              		.loc 1 1139 0
 164 00e0 0126     		movs	r6, #1
 165 00e2 0796     		str	r6, [sp, #28]
1140:Src/main.cpp  **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
 166              		.loc 1 1140 0
 167 00e4 0894     		str	r4, [sp, #32]
1141:Src/main.cpp  **** 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 168              		.loc 1 1141 0
 169 00e6 0225     		movs	r5, #2
 170 00e8 0995     		str	r5, [sp, #36]
1142:Src/main.cpp  **** 	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
ARM GAS  /tmp/cc9h6Bqx.s 			page 24


 171              		.loc 1 1142 0
 172 00ea 06A9     		add	r1, sp, #24
 173 00ec 3846     		mov	r0, r7
 174 00ee FFF7FEFF 		bl	HAL_GPIO_Init
 175              	.LVL7:
1143:Src/main.cpp  **** 
1144:Src/main.cpp  **** 	/*Configure GPIO pins : PE7 PE8 PE10 PE11
1145:Src/main.cpp  **** 	                         PE12 PE13 PE14 PE15 */
1146:Src/main.cpp  **** 	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11
 176              		.loc 1 1146 0
 177 00f2 4FF68053 		movw	r3, #64896
 178 00f6 0693     		str	r3, [sp, #24]
1147:Src/main.cpp  **** 	                      |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
1148:Src/main.cpp  **** 	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 179              		.loc 1 1148 0
 180 00f8 0796     		str	r6, [sp, #28]
1149:Src/main.cpp  **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
 181              		.loc 1 1149 0
 182 00fa 0894     		str	r4, [sp, #32]
1150:Src/main.cpp  **** 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 183              		.loc 1 1150 0
 184 00fc 0995     		str	r5, [sp, #36]
1151:Src/main.cpp  **** 	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 185              		.loc 1 1151 0
 186 00fe 06A9     		add	r1, sp, #24
 187 0100 5046     		mov	r0, r10
 188 0102 FFF7FEFF 		bl	HAL_GPIO_Init
 189              	.LVL8:
1152:Src/main.cpp  **** 
1153:Src/main.cpp  **** 	/*Configure GPIO pins : PD10 PD11 PD13 PD14
1154:Src/main.cpp  **** 	                         PD15 PD0 PD1 PD3 */
1155:Src/main.cpp  **** 	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14
 190              		.loc 1 1155 0
 191 0106 4EF60B43 		movw	r3, #60427
 192 010a 0693     		str	r3, [sp, #24]
1156:Src/main.cpp  **** 	                      |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
1157:Src/main.cpp  **** 	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 193              		.loc 1 1157 0
 194 010c 0796     		str	r6, [sp, #28]
1158:Src/main.cpp  **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
 195              		.loc 1 1158 0
 196 010e 0894     		str	r4, [sp, #32]
1159:Src/main.cpp  **** 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 197              		.loc 1 1159 0
 198 0110 0995     		str	r5, [sp, #36]
1160:Src/main.cpp  **** 	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 199              		.loc 1 1160 0
 200 0112 06A9     		add	r1, sp, #24
 201 0114 4046     		mov	r0, r8
 202 0116 FFF7FEFF 		bl	HAL_GPIO_Init
 203              	.LVL9:
1161:Src/main.cpp  **** 
1162:Src/main.cpp  **** 	/*Configure GPIO pin : PC7 */
1163:Src/main.cpp  **** 	GPIO_InitStruct.Pin = GPIO_PIN_7;
 204              		.loc 1 1163 0
 205 011a 8023     		movs	r3, #128
 206 011c 0693     		str	r3, [sp, #24]
ARM GAS  /tmp/cc9h6Bqx.s 			page 25


1164:Src/main.cpp  **** 	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 207              		.loc 1 1164 0
 208 011e 0796     		str	r6, [sp, #28]
1165:Src/main.cpp  **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
 209              		.loc 1 1165 0
 210 0120 0894     		str	r4, [sp, #32]
1166:Src/main.cpp  **** 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 211              		.loc 1 1166 0
 212 0122 0995     		str	r5, [sp, #36]
1167:Src/main.cpp  **** 	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 213              		.loc 1 1167 0
 214 0124 06A9     		add	r1, sp, #24
 215 0126 4846     		mov	r0, r9
 216 0128 FFF7FEFF 		bl	HAL_GPIO_Init
 217              	.LVL10:
1168:Src/main.cpp  **** 
1169:Src/main.cpp  **** 	/*Configure GPIO pin : PA8 */
1170:Src/main.cpp  **** 	GPIO_InitStruct.Pin = GPIO_PIN_8;
 218              		.loc 1 1170 0
 219 012c 4FF48073 		mov	r3, #256
 220 0130 0693     		str	r3, [sp, #24]
1171:Src/main.cpp  **** 	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 221              		.loc 1 1171 0
 222 0132 0796     		str	r6, [sp, #28]
1172:Src/main.cpp  **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
 223              		.loc 1 1172 0
 224 0134 0894     		str	r4, [sp, #32]
1173:Src/main.cpp  **** 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 225              		.loc 1 1173 0
 226 0136 0995     		str	r5, [sp, #36]
1174:Src/main.cpp  **** 	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 227              		.loc 1 1174 0
 228 0138 06A9     		add	r1, sp, #24
 229 013a 5846     		mov	r0, fp
 230 013c FFF7FEFF 		bl	HAL_GPIO_Init
 231              	.LVL11:
1175:Src/main.cpp  **** 
1176:Src/main.cpp  **** 	/*Configure GPIO pins : PD4 PD7 */
1177:Src/main.cpp  **** 	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 232              		.loc 1 1177 0
 233 0140 9023     		movs	r3, #144
 234 0142 0693     		str	r3, [sp, #24]
1178:Src/main.cpp  **** 	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 235              		.loc 1 1178 0
 236 0144 0794     		str	r4, [sp, #28]
1179:Src/main.cpp  **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
 237              		.loc 1 1179 0
 238 0146 0894     		str	r4, [sp, #32]
1180:Src/main.cpp  **** 	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 239              		.loc 1 1180 0
 240 0148 06A9     		add	r1, sp, #24
 241 014a 4046     		mov	r0, r8
 242 014c FFF7FEFF 		bl	HAL_GPIO_Init
 243              	.LVL12:
1181:Src/main.cpp  **** 
1182:Src/main.cpp  **** 	/*Configure GPIO pins : PB8 PB9 */
1183:Src/main.cpp  **** 	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
ARM GAS  /tmp/cc9h6Bqx.s 			page 26


 244              		.loc 1 1183 0
 245 0150 4FF44073 		mov	r3, #768
 246 0154 0693     		str	r3, [sp, #24]
1184:Src/main.cpp  **** 	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 247              		.loc 1 1184 0
 248 0156 0794     		str	r4, [sp, #28]
1185:Src/main.cpp  **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
 249              		.loc 1 1185 0
 250 0158 0894     		str	r4, [sp, #32]
1186:Src/main.cpp  **** 	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 251              		.loc 1 1186 0
 252 015a 06A9     		add	r1, sp, #24
 253 015c 3846     		mov	r0, r7
 254 015e FFF7FEFF 		bl	HAL_GPIO_Init
 255              	.LVL13:
1187:Src/main.cpp  **** 
1188:Src/main.cpp  **** }
 256              		.loc 1 1188 0
 257 0162 0BB0     		add	sp, sp, #44
 258              	.LCFI2:
 259              		.cfi_def_cfa_offset 36
 260              		@ sp needed
 261 0164 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 262              	.L4:
 263              		.align	2
 264              	.L3:
 265 0168 00100240 		.word	1073876992
 266 016c 000C0140 		.word	1073810432
 267 0170 00180140 		.word	1073813504
 268 0174 00140140 		.word	1073812480
 269 0178 00100140 		.word	1073811456
 270 017c 00080140 		.word	1073809408
 271              		.cfi_endproc
 272              	.LFE101:
 274              		.section	.text._ZL11MX_DMA_Initv,"ax",%progbits
 275              		.align	1
 276              		.syntax unified
 277              		.thumb
 278              		.thumb_func
 279              		.fpu softvfp
 281              	_ZL11MX_DMA_Initv:
 282              	.LFB100:
1066:Src/main.cpp  **** 
 283              		.loc 1 1066 0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 8
 286              		@ frame_needed = 0, uses_anonymous_args = 0
 287 0000 00B5     		push	{lr}
 288              	.LCFI3:
 289              		.cfi_def_cfa_offset 4
 290              		.cfi_offset 14, -4
 291 0002 83B0     		sub	sp, sp, #12
 292              	.LCFI4:
 293              		.cfi_def_cfa_offset 16
 294              	.LBB37:
1069:Src/main.cpp  **** 
 295              		.loc 1 1069 0
ARM GAS  /tmp/cc9h6Bqx.s 			page 27


 296 0004 1A4B     		ldr	r3, .L7
 297 0006 5A69     		ldr	r2, [r3, #20]
 298 0008 42F00102 		orr	r2, r2, #1
 299 000c 5A61     		str	r2, [r3, #20]
 300 000e 5B69     		ldr	r3, [r3, #20]
 301 0010 03F00103 		and	r3, r3, #1
 302 0014 0193     		str	r3, [sp, #4]
 303 0016 019B     		ldr	r3, [sp, #4]
 304              	.LBE37:
1073:Src/main.cpp  **** 	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 305              		.loc 1 1073 0
 306 0018 0022     		movs	r2, #0
 307 001a 1146     		mov	r1, r2
 308 001c 0C20     		movs	r0, #12
 309 001e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 310              	.LVL14:
1074:Src/main.cpp  **** 	/* DMA1_Channel3_IRQn interrupt configuration */
 311              		.loc 1 1074 0
 312 0022 0C20     		movs	r0, #12
 313 0024 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 314              	.LVL15:
1076:Src/main.cpp  **** 	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 315              		.loc 1 1076 0
 316 0028 0022     		movs	r2, #0
 317 002a 1146     		mov	r1, r2
 318 002c 0D20     		movs	r0, #13
 319 002e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 320              	.LVL16:
1077:Src/main.cpp  **** 	/* DMA1_Channel4_IRQn interrupt configuration */
 321              		.loc 1 1077 0
 322 0032 0D20     		movs	r0, #13
 323 0034 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 324              	.LVL17:
1079:Src/main.cpp  **** 	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 325              		.loc 1 1079 0
 326 0038 0022     		movs	r2, #0
 327 003a 1146     		mov	r1, r2
 328 003c 0E20     		movs	r0, #14
 329 003e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 330              	.LVL18:
1080:Src/main.cpp  **** 	/* DMA1_Channel6_IRQn interrupt configuration */
 331              		.loc 1 1080 0
 332 0042 0E20     		movs	r0, #14
 333 0044 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 334              	.LVL19:
1082:Src/main.cpp  **** 	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 335              		.loc 1 1082 0
 336 0048 0022     		movs	r2, #0
 337 004a 1146     		mov	r1, r2
 338 004c 1020     		movs	r0, #16
 339 004e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 340              	.LVL20:
1083:Src/main.cpp  **** 	/* DMA1_Channel7_IRQn interrupt configuration */
 341              		.loc 1 1083 0
 342 0052 1020     		movs	r0, #16
 343 0054 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 344              	.LVL21:
ARM GAS  /tmp/cc9h6Bqx.s 			page 28


1085:Src/main.cpp  **** 	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 345              		.loc 1 1085 0
 346 0058 0022     		movs	r2, #0
 347 005a 1146     		mov	r1, r2
 348 005c 1120     		movs	r0, #17
 349 005e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 350              	.LVL22:
1086:Src/main.cpp  **** 
 351              		.loc 1 1086 0
 352 0062 1120     		movs	r0, #17
 353 0064 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 354              	.LVL23:
1088:Src/main.cpp  **** 
 355              		.loc 1 1088 0
 356 0068 03B0     		add	sp, sp, #12
 357              	.LCFI5:
 358              		.cfi_def_cfa_offset 4
 359              		@ sp needed
 360 006a 5DF804FB 		ldr	pc, [sp], #4
 361              	.L8:
 362 006e 00BF     		.align	2
 363              	.L7:
 364 0070 00100240 		.word	1073876992
 365              		.cfi_endproc
 366              	.LFE100:
 368              		.section	.text._ZL12MX_ADC1_Initv,"ax",%progbits
 369              		.align	1
 370              		.syntax unified
 371              		.thumb
 372              		.thumb_func
 373              		.fpu softvfp
 375              	_ZL12MX_ADC1_Initv:
 376              	.LFB83:
 274:Src/main.cpp  **** 
 377              		.loc 1 274 0
 378              		.cfi_startproc
 379              		@ args = 0, pretend = 0, frame = 16
 380              		@ frame_needed = 0, uses_anonymous_args = 0
 381 0000 70B5     		push	{r4, r5, r6, lr}
 382              	.LCFI6:
 383              		.cfi_def_cfa_offset 16
 384              		.cfi_offset 4, -16
 385              		.cfi_offset 5, -12
 386              		.cfi_offset 6, -8
 387              		.cfi_offset 14, -4
 388 0002 84B0     		sub	sp, sp, #16
 389              	.LCFI7:
 390              		.cfi_def_cfa_offset 32
 280:Src/main.cpp  **** 
 391              		.loc 1 280 0
 392 0004 0023     		movs	r3, #0
 393 0006 0193     		str	r3, [sp, #4]
 394 0008 0293     		str	r3, [sp, #8]
 395 000a 0393     		str	r3, [sp, #12]
 287:Src/main.cpp  **** 	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 396              		.loc 1 287 0
 397 000c 214C     		ldr	r4, .L11
ARM GAS  /tmp/cc9h6Bqx.s 			page 29


 398 000e 224A     		ldr	r2, .L11+4
 399 0010 2260     		str	r2, [r4]
 288:Src/main.cpp  **** 	hadc1.Init.ContinuousConvMode = ENABLE;
 400              		.loc 1 288 0
 401 0012 4FF48072 		mov	r2, #256
 402 0016 A260     		str	r2, [r4, #8]
 289:Src/main.cpp  **** 	hadc1.Init.DiscontinuousConvMode = DISABLE;
 403              		.loc 1 289 0
 404 0018 0125     		movs	r5, #1
 405 001a 2573     		strb	r5, [r4, #12]
 290:Src/main.cpp  **** 	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 406              		.loc 1 290 0
 407 001c 2375     		strb	r3, [r4, #20]
 291:Src/main.cpp  **** 	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 408              		.loc 1 291 0
 409 001e 4FF46022 		mov	r2, #917504
 410 0022 E261     		str	r2, [r4, #28]
 292:Src/main.cpp  **** 	hadc1.Init.NbrOfConversion = 6;
 411              		.loc 1 292 0
 412 0024 6360     		str	r3, [r4, #4]
 293:Src/main.cpp  **** 	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 413              		.loc 1 293 0
 414 0026 0626     		movs	r6, #6
 415 0028 2661     		str	r6, [r4, #16]
 294:Src/main.cpp  **** 	{
 416              		.loc 1 294 0
 417 002a 2046     		mov	r0, r4
 418 002c FFF7FEFF 		bl	HAL_ADC_Init
 419              	.LVL24:
 300:Src/main.cpp  **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 420              		.loc 1 300 0
 421 0030 0823     		movs	r3, #8
 422 0032 0193     		str	r3, [sp, #4]
 301:Src/main.cpp  **** 	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 423              		.loc 1 301 0
 424 0034 0295     		str	r5, [sp, #8]
 302:Src/main.cpp  **** 	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 425              		.loc 1 302 0
 426 0036 0395     		str	r5, [sp, #12]
 303:Src/main.cpp  **** 	{
 427              		.loc 1 303 0
 428 0038 01A9     		add	r1, sp, #4
 429 003a 2046     		mov	r0, r4
 430 003c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 431              	.LVL25:
 309:Src/main.cpp  **** 	sConfig.Rank = ADC_REGULAR_RANK_2;
 432              		.loc 1 309 0
 433 0040 0923     		movs	r3, #9
 434 0042 0193     		str	r3, [sp, #4]
 310:Src/main.cpp  **** 	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 435              		.loc 1 310 0
 436 0044 0223     		movs	r3, #2
 437 0046 0293     		str	r3, [sp, #8]
 311:Src/main.cpp  **** 	{
 438              		.loc 1 311 0
 439 0048 01A9     		add	r1, sp, #4
 440 004a 2046     		mov	r0, r4
ARM GAS  /tmp/cc9h6Bqx.s 			page 30


 441 004c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 442              	.LVL26:
 317:Src/main.cpp  **** 	sConfig.Rank = ADC_REGULAR_RANK_3;
 443              		.loc 1 317 0
 444 0050 0C23     		movs	r3, #12
 445 0052 0193     		str	r3, [sp, #4]
 318:Src/main.cpp  **** 	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 446              		.loc 1 318 0
 447 0054 0323     		movs	r3, #3
 448 0056 0293     		str	r3, [sp, #8]
 319:Src/main.cpp  **** 	{
 449              		.loc 1 319 0
 450 0058 01A9     		add	r1, sp, #4
 451 005a 2046     		mov	r0, r4
 452 005c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 453              	.LVL27:
 325:Src/main.cpp  **** 	sConfig.Rank = ADC_REGULAR_RANK_4;
 454              		.loc 1 325 0
 455 0060 0D23     		movs	r3, #13
 456 0062 0193     		str	r3, [sp, #4]
 326:Src/main.cpp  **** 	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 457              		.loc 1 326 0
 458 0064 0423     		movs	r3, #4
 459 0066 0293     		str	r3, [sp, #8]
 327:Src/main.cpp  **** 	{
 460              		.loc 1 327 0
 461 0068 0DEB0301 		add	r1, sp, r3
 462 006c 2046     		mov	r0, r4
 463 006e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 464              	.LVL28:
 333:Src/main.cpp  **** 	sConfig.Rank = ADC_REGULAR_RANK_5;
 465              		.loc 1 333 0
 466 0072 0E23     		movs	r3, #14
 467 0074 0193     		str	r3, [sp, #4]
 334:Src/main.cpp  **** 	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 468              		.loc 1 334 0
 469 0076 0523     		movs	r3, #5
 470 0078 0293     		str	r3, [sp, #8]
 335:Src/main.cpp  **** 	{
 471              		.loc 1 335 0
 472 007a 01A9     		add	r1, sp, #4
 473 007c 2046     		mov	r0, r4
 474 007e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 475              	.LVL29:
 341:Src/main.cpp  **** 	sConfig.Rank = ADC_REGULAR_RANK_6;
 476              		.loc 1 341 0
 477 0082 0F23     		movs	r3, #15
 478 0084 0193     		str	r3, [sp, #4]
 342:Src/main.cpp  **** 	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 479              		.loc 1 342 0
 480 0086 0296     		str	r6, [sp, #8]
 343:Src/main.cpp  **** 	{
 481              		.loc 1 343 0
 482 0088 01A9     		add	r1, sp, #4
 483 008a 2046     		mov	r0, r4
 484 008c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 485              	.LVL30:
ARM GAS  /tmp/cc9h6Bqx.s 			page 31


 351:Src/main.cpp  **** 
 486              		.loc 1 351 0
 487 0090 04B0     		add	sp, sp, #16
 488              	.LCFI8:
 489              		.cfi_def_cfa_offset 16
 490              		@ sp needed
 491 0092 70BD     		pop	{r4, r5, r6, pc}
 492              	.L12:
 493              		.align	2
 494              	.L11:
 495 0094 00000000 		.word	.LANCHOR0
 496 0098 00240140 		.word	1073816576
 497              		.cfi_endproc
 498              	.LFE83:
 500              		.section	.text._ZL12MX_ADC3_Initv,"ax",%progbits
 501              		.align	1
 502              		.syntax unified
 503              		.thumb
 504              		.thumb_func
 505              		.fpu softvfp
 507              	_ZL12MX_ADC3_Initv:
 508              	.LFB84:
 359:Src/main.cpp  **** 
 509              		.loc 1 359 0
 510              		.cfi_startproc
 511              		@ args = 0, pretend = 0, frame = 16
 512              		@ frame_needed = 0, uses_anonymous_args = 0
 513 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 514              	.LCFI9:
 515              		.cfi_def_cfa_offset 20
 516              		.cfi_offset 4, -20
 517              		.cfi_offset 5, -16
 518              		.cfi_offset 6, -12
 519              		.cfi_offset 7, -8
 520              		.cfi_offset 14, -4
 521 0002 85B0     		sub	sp, sp, #20
 522              	.LCFI10:
 523              		.cfi_def_cfa_offset 40
 365:Src/main.cpp  **** 
 524              		.loc 1 365 0
 525 0004 0025     		movs	r5, #0
 526 0006 0195     		str	r5, [sp, #4]
 527 0008 0295     		str	r5, [sp, #8]
 528 000a 0395     		str	r5, [sp, #12]
 372:Src/main.cpp  **** 	hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 529              		.loc 1 372 0
 530 000c 1F4C     		ldr	r4, .L15
 531 000e 204B     		ldr	r3, .L15+4
 532 0010 2360     		str	r3, [r4]
 373:Src/main.cpp  **** 	hadc3.Init.ContinuousConvMode = ENABLE;
 533              		.loc 1 373 0
 534 0012 4FF48073 		mov	r3, #256
 535 0016 A360     		str	r3, [r4, #8]
 374:Src/main.cpp  **** 	hadc3.Init.DiscontinuousConvMode = DISABLE;
 536              		.loc 1 374 0
 537 0018 0126     		movs	r6, #1
 538 001a 2673     		strb	r6, [r4, #12]
ARM GAS  /tmp/cc9h6Bqx.s 			page 32


 375:Src/main.cpp  **** 	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 539              		.loc 1 375 0
 540 001c 2575     		strb	r5, [r4, #20]
 376:Src/main.cpp  **** 	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 541              		.loc 1 376 0
 542 001e 4FF46023 		mov	r3, #917504
 543 0022 E361     		str	r3, [r4, #28]
 377:Src/main.cpp  **** 	hadc3.Init.NbrOfConversion = 6;
 544              		.loc 1 377 0
 545 0024 6560     		str	r5, [r4, #4]
 378:Src/main.cpp  **** 	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 546              		.loc 1 378 0
 547 0026 0627     		movs	r7, #6
 548 0028 2761     		str	r7, [r4, #16]
 379:Src/main.cpp  **** 	{
 549              		.loc 1 379 0
 550 002a 2046     		mov	r0, r4
 551 002c FFF7FEFF 		bl	HAL_ADC_Init
 552              	.LVL31:
 385:Src/main.cpp  **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 553              		.loc 1 385 0
 554 0030 0195     		str	r5, [sp, #4]
 386:Src/main.cpp  **** 	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 555              		.loc 1 386 0
 556 0032 0296     		str	r6, [sp, #8]
 387:Src/main.cpp  **** 	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 557              		.loc 1 387 0
 558 0034 0396     		str	r6, [sp, #12]
 388:Src/main.cpp  **** 	{
 559              		.loc 1 388 0
 560 0036 01A9     		add	r1, sp, #4
 561 0038 2046     		mov	r0, r4
 562 003a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 563              	.LVL32:
 394:Src/main.cpp  **** 	sConfig.Rank = ADC_REGULAR_RANK_2;
 564              		.loc 1 394 0
 565 003e 0196     		str	r6, [sp, #4]
 395:Src/main.cpp  **** 	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 566              		.loc 1 395 0
 567 0040 0225     		movs	r5, #2
 568 0042 0295     		str	r5, [sp, #8]
 396:Src/main.cpp  **** 	{
 569              		.loc 1 396 0
 570 0044 01A9     		add	r1, sp, #4
 571 0046 2046     		mov	r0, r4
 572 0048 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 573              	.LVL33:
 402:Src/main.cpp  **** 	sConfig.Rank = ADC_REGULAR_RANK_3;
 574              		.loc 1 402 0
 575 004c 0195     		str	r5, [sp, #4]
 403:Src/main.cpp  **** 	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 576              		.loc 1 403 0
 577 004e 0325     		movs	r5, #3
 578 0050 0295     		str	r5, [sp, #8]
 404:Src/main.cpp  **** 	{
 579              		.loc 1 404 0
 580 0052 01A9     		add	r1, sp, #4
ARM GAS  /tmp/cc9h6Bqx.s 			page 33


 581 0054 2046     		mov	r0, r4
 582 0056 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 583              	.LVL34:
 410:Src/main.cpp  **** 	sConfig.Rank = ADC_REGULAR_RANK_4;
 584              		.loc 1 410 0
 585 005a 0195     		str	r5, [sp, #4]
 411:Src/main.cpp  **** 	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 586              		.loc 1 411 0
 587 005c 0423     		movs	r3, #4
 588 005e 0293     		str	r3, [sp, #8]
 412:Src/main.cpp  **** 	{
 589              		.loc 1 412 0
 590 0060 0DEB0301 		add	r1, sp, r3
 591 0064 2046     		mov	r0, r4
 592 0066 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 593              	.LVL35:
 418:Src/main.cpp  **** 	sConfig.Rank = ADC_REGULAR_RANK_5;
 594              		.loc 1 418 0
 595 006a 0A23     		movs	r3, #10
 596 006c 0193     		str	r3, [sp, #4]
 419:Src/main.cpp  **** 	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 597              		.loc 1 419 0
 598 006e 0523     		movs	r3, #5
 599 0070 0293     		str	r3, [sp, #8]
 420:Src/main.cpp  **** 	{
 600              		.loc 1 420 0
 601 0072 01A9     		add	r1, sp, #4
 602 0074 2046     		mov	r0, r4
 603 0076 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 604              	.LVL36:
 426:Src/main.cpp  **** 	sConfig.Rank = ADC_REGULAR_RANK_6;
 605              		.loc 1 426 0
 606 007a 0B23     		movs	r3, #11
 607 007c 0193     		str	r3, [sp, #4]
 427:Src/main.cpp  **** 	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 608              		.loc 1 427 0
 609 007e 0297     		str	r7, [sp, #8]
 428:Src/main.cpp  **** 	{
 610              		.loc 1 428 0
 611 0080 01A9     		add	r1, sp, #4
 612 0082 2046     		mov	r0, r4
 613 0084 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 614              	.LVL37:
 435:Src/main.cpp  **** 
 615              		.loc 1 435 0
 616 0088 05B0     		add	sp, sp, #20
 617              	.LCFI11:
 618              		.cfi_def_cfa_offset 20
 619              		@ sp needed
 620 008a F0BD     		pop	{r4, r5, r6, r7, pc}
 621              	.L16:
 622              		.align	2
 623              	.L15:
 624 008c 00000000 		.word	.LANCHOR1
 625 0090 003C0140 		.word	1073822720
 626              		.cfi_endproc
 627              	.LFE84:
ARM GAS  /tmp/cc9h6Bqx.s 			page 34


 629              		.section	.text._ZL11MX_DAC_Initv,"ax",%progbits
 630              		.align	1
 631              		.syntax unified
 632              		.thumb
 633              		.thumb_func
 634              		.fpu softvfp
 636              	_ZL11MX_DAC_Initv:
 637              	.LFB85:
 443:Src/main.cpp  **** 
 638              		.loc 1 443 0
 639              		.cfi_startproc
 640              		@ args = 0, pretend = 0, frame = 8
 641              		@ frame_needed = 0, uses_anonymous_args = 0
 642 0000 30B5     		push	{r4, r5, lr}
 643              	.LCFI12:
 644              		.cfi_def_cfa_offset 12
 645              		.cfi_offset 4, -12
 646              		.cfi_offset 5, -8
 647              		.cfi_offset 14, -4
 648 0002 83B0     		sub	sp, sp, #12
 649              	.LCFI13:
 650              		.cfi_def_cfa_offset 24
 449:Src/main.cpp  **** 
 651              		.loc 1 449 0
 652 0004 0024     		movs	r4, #0
 653 0006 0094     		str	r4, [sp]
 654 0008 0194     		str	r4, [sp, #4]
 456:Src/main.cpp  **** 	if (HAL_DAC_Init(&hdac) != HAL_OK)
 655              		.loc 1 456 0
 656 000a 074D     		ldr	r5, .L19
 657 000c 074B     		ldr	r3, .L19+4
 658 000e 2B60     		str	r3, [r5]
 457:Src/main.cpp  **** 	{
 659              		.loc 1 457 0
 660 0010 2846     		mov	r0, r5
 661 0012 FFF7FEFF 		bl	HAL_DAC_Init
 662              	.LVL38:
 463:Src/main.cpp  **** 	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 663              		.loc 1 463 0
 664 0016 0094     		str	r4, [sp]
 464:Src/main.cpp  **** 	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 665              		.loc 1 464 0
 666 0018 0194     		str	r4, [sp, #4]
 465:Src/main.cpp  **** 	{
 667              		.loc 1 465 0
 668 001a 2246     		mov	r2, r4
 669 001c 6946     		mov	r1, sp
 670 001e 2846     		mov	r0, r5
 671 0020 FFF7FEFF 		bl	HAL_DAC_ConfigChannel
 672              	.LVL39:
 473:Src/main.cpp  **** 
 673              		.loc 1 473 0
 674 0024 03B0     		add	sp, sp, #12
 675              	.LCFI14:
 676              		.cfi_def_cfa_offset 12
 677              		@ sp needed
 678 0026 30BD     		pop	{r4, r5, pc}
ARM GAS  /tmp/cc9h6Bqx.s 			page 35


 679              	.L20:
 680              		.align	2
 681              	.L19:
 682 0028 00000000 		.word	.LANCHOR2
 683 002c 00740040 		.word	1073771520
 684              		.cfi_endproc
 685              	.LFE85:
 687              		.section	.text._ZL12MX_I2C1_Initv,"ax",%progbits
 688              		.align	1
 689              		.syntax unified
 690              		.thumb
 691              		.thumb_func
 692              		.fpu softvfp
 694              	_ZL12MX_I2C1_Initv:
 695              	.LFB86:
 481:Src/main.cpp  **** 
 696              		.loc 1 481 0
 697              		.cfi_startproc
 698              		@ args = 0, pretend = 0, frame = 0
 699              		@ frame_needed = 0, uses_anonymous_args = 0
 700 0000 08B5     		push	{r3, lr}
 701              	.LCFI15:
 702              		.cfi_def_cfa_offset 8
 703              		.cfi_offset 3, -8
 704              		.cfi_offset 14, -4
 490:Src/main.cpp  **** 	hi2c1.Init.ClockSpeed = 100000;
 705              		.loc 1 490 0
 706 0002 0948     		ldr	r0, .L23
 707 0004 094B     		ldr	r3, .L23+4
 708 0006 0360     		str	r3, [r0]
 491:Src/main.cpp  **** 	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 709              		.loc 1 491 0
 710 0008 094B     		ldr	r3, .L23+8
 711 000a 4360     		str	r3, [r0, #4]
 492:Src/main.cpp  **** 	hi2c1.Init.OwnAddress1 = 0;
 712              		.loc 1 492 0
 713 000c 0023     		movs	r3, #0
 714 000e 8360     		str	r3, [r0, #8]
 493:Src/main.cpp  **** 	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 715              		.loc 1 493 0
 716 0010 C360     		str	r3, [r0, #12]
 494:Src/main.cpp  **** 	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 717              		.loc 1 494 0
 718 0012 4FF48042 		mov	r2, #16384
 719 0016 0261     		str	r2, [r0, #16]
 495:Src/main.cpp  **** 	hi2c1.Init.OwnAddress2 = 0;
 720              		.loc 1 495 0
 721 0018 4361     		str	r3, [r0, #20]
 496:Src/main.cpp  **** 	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 722              		.loc 1 496 0
 723 001a 8361     		str	r3, [r0, #24]
 497:Src/main.cpp  **** 	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 724              		.loc 1 497 0
 725 001c C361     		str	r3, [r0, #28]
 498:Src/main.cpp  **** 	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 726              		.loc 1 498 0
 727 001e 0362     		str	r3, [r0, #32]
ARM GAS  /tmp/cc9h6Bqx.s 			page 36


 499:Src/main.cpp  **** 	{
 728              		.loc 1 499 0
 729 0020 FFF7FEFF 		bl	HAL_I2C_Init
 730              	.LVL40:
 731 0024 08BD     		pop	{r3, pc}
 732              	.L24:
 733 0026 00BF     		.align	2
 734              	.L23:
 735 0028 00000000 		.word	.LANCHOR3
 736 002c 00540040 		.word	1073763328
 737 0030 A0860100 		.word	100000
 738              		.cfi_endproc
 739              	.LFE86:
 741              		.section	.text._ZL12MX_I2C2_Initv,"ax",%progbits
 742              		.align	1
 743              		.syntax unified
 744              		.thumb
 745              		.thumb_func
 746              		.fpu softvfp
 748              	_ZL12MX_I2C2_Initv:
 749              	.LFB87:
 515:Src/main.cpp  **** 
 750              		.loc 1 515 0
 751              		.cfi_startproc
 752              		@ args = 0, pretend = 0, frame = 0
 753              		@ frame_needed = 0, uses_anonymous_args = 0
 754 0000 08B5     		push	{r3, lr}
 755              	.LCFI16:
 756              		.cfi_def_cfa_offset 8
 757              		.cfi_offset 3, -8
 758              		.cfi_offset 14, -4
 524:Src/main.cpp  **** 	hi2c2.Init.ClockSpeed = 100000;
 759              		.loc 1 524 0
 760 0002 0948     		ldr	r0, .L27
 761 0004 094B     		ldr	r3, .L27+4
 762 0006 0360     		str	r3, [r0]
 525:Src/main.cpp  **** 	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 763              		.loc 1 525 0
 764 0008 094B     		ldr	r3, .L27+8
 765 000a 4360     		str	r3, [r0, #4]
 526:Src/main.cpp  **** 	hi2c2.Init.OwnAddress1 = 0;
 766              		.loc 1 526 0
 767 000c 0023     		movs	r3, #0
 768 000e 8360     		str	r3, [r0, #8]
 527:Src/main.cpp  **** 	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 769              		.loc 1 527 0
 770 0010 C360     		str	r3, [r0, #12]
 528:Src/main.cpp  **** 	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 771              		.loc 1 528 0
 772 0012 4FF48042 		mov	r2, #16384
 773 0016 0261     		str	r2, [r0, #16]
 529:Src/main.cpp  **** 	hi2c2.Init.OwnAddress2 = 0;
 774              		.loc 1 529 0
 775 0018 4361     		str	r3, [r0, #20]
 530:Src/main.cpp  **** 	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 776              		.loc 1 530 0
 777 001a 8361     		str	r3, [r0, #24]
ARM GAS  /tmp/cc9h6Bqx.s 			page 37


 531:Src/main.cpp  **** 	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 778              		.loc 1 531 0
 779 001c C361     		str	r3, [r0, #28]
 532:Src/main.cpp  **** 	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 780              		.loc 1 532 0
 781 001e 0362     		str	r3, [r0, #32]
 533:Src/main.cpp  **** 	{
 782              		.loc 1 533 0
 783 0020 FFF7FEFF 		bl	HAL_I2C_Init
 784              	.LVL41:
 785 0024 08BD     		pop	{r3, pc}
 786              	.L28:
 787 0026 00BF     		.align	2
 788              	.L27:
 789 0028 00000000 		.word	.LANCHOR4
 790 002c 00580040 		.word	1073764352
 791 0030 A0860100 		.word	100000
 792              		.cfi_endproc
 793              	.LFE87:
 795              		.section	.text._ZL11MX_RTC_Initv,"ax",%progbits
 796              		.align	1
 797              		.syntax unified
 798              		.thumb
 799              		.thumb_func
 800              		.fpu softvfp
 802              	_ZL11MX_RTC_Initv:
 803              	.LFB88:
 549:Src/main.cpp  **** 
 804              		.loc 1 549 0
 805              		.cfi_startproc
 806              		@ args = 0, pretend = 0, frame = 8
 807              		@ frame_needed = 0, uses_anonymous_args = 0
 808 0000 30B5     		push	{r4, r5, lr}
 809              	.LCFI17:
 810              		.cfi_def_cfa_offset 12
 811              		.cfi_offset 4, -12
 812              		.cfi_offset 5, -8
 813              		.cfi_offset 14, -4
 814 0002 83B0     		sub	sp, sp, #12
 815              	.LCFI18:
 816              		.cfi_def_cfa_offset 24
 555:Src/main.cpp  **** 	RTC_DateTypeDef DateToUpdate = {0};
 817              		.loc 1 555 0
 818 0004 0024     		movs	r4, #0
 819 0006 ADF80440 		strh	r4, [sp, #4]	@ movhi
 820 000a 8DF80640 		strb	r4, [sp, #6]
 556:Src/main.cpp  **** 
 821              		.loc 1 556 0
 822 000e 0094     		str	r4, [sp]
 563:Src/main.cpp  **** 	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 823              		.loc 1 563 0
 824 0010 124D     		ldr	r5, .L31
 825 0012 134B     		ldr	r3, .L31+4
 826 0014 2B60     		str	r3, [r5]
 564:Src/main.cpp  **** 	hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 827              		.loc 1 564 0
 828 0016 4FF0FF33 		mov	r3, #-1
ARM GAS  /tmp/cc9h6Bqx.s 			page 38


 829 001a 6B60     		str	r3, [r5, #4]
 565:Src/main.cpp  **** 	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 830              		.loc 1 565 0
 831 001c 4FF48073 		mov	r3, #256
 832 0020 AB60     		str	r3, [r5, #8]
 566:Src/main.cpp  **** 	{
 833              		.loc 1 566 0
 834 0022 2846     		mov	r0, r5
 835 0024 FFF7FEFF 		bl	HAL_RTC_Init
 836              	.LVL42:
 577:Src/main.cpp  **** 	sTime.Minutes = 0x0;
 837              		.loc 1 577 0
 838 0028 8DF80440 		strb	r4, [sp, #4]
 578:Src/main.cpp  **** 	sTime.Seconds = 0x0;
 839              		.loc 1 578 0
 840 002c 8DF80540 		strb	r4, [sp, #5]
 579:Src/main.cpp  **** 
 841              		.loc 1 579 0
 842 0030 8DF80640 		strb	r4, [sp, #6]
 581:Src/main.cpp  **** 	{
 843              		.loc 1 581 0
 844 0034 0122     		movs	r2, #1
 845 0036 01A9     		add	r1, sp, #4
 846 0038 2846     		mov	r0, r5
 847 003a FFF7FEFF 		bl	HAL_RTC_SetTime
 848              	.LVL43:
 585:Src/main.cpp  **** 	DateToUpdate.Month = RTC_MONTH_JANUARY;
 849              		.loc 1 585 0
 850 003e 0122     		movs	r2, #1
 851 0040 8DF80020 		strb	r2, [sp]
 586:Src/main.cpp  **** 	DateToUpdate.Date = 0x1;
 852              		.loc 1 586 0
 853 0044 8DF80120 		strb	r2, [sp, #1]
 587:Src/main.cpp  **** 	DateToUpdate.Year = 0x0;
 854              		.loc 1 587 0
 855 0048 8DF80220 		strb	r2, [sp, #2]
 588:Src/main.cpp  **** 
 856              		.loc 1 588 0
 857 004c 8DF80340 		strb	r4, [sp, #3]
 590:Src/main.cpp  **** 	{
 858              		.loc 1 590 0
 859 0050 6946     		mov	r1, sp
 860 0052 2846     		mov	r0, r5
 861 0054 FFF7FEFF 		bl	HAL_RTC_SetDate
 862              	.LVL44:
 598:Src/main.cpp  **** 
 863              		.loc 1 598 0
 864 0058 03B0     		add	sp, sp, #12
 865              	.LCFI19:
 866              		.cfi_def_cfa_offset 12
 867              		@ sp needed
 868 005a 30BD     		pop	{r4, r5, pc}
 869              	.L32:
 870              		.align	2
 871              	.L31:
 872 005c 00000000 		.word	.LANCHOR5
 873 0060 00280040 		.word	1073752064
ARM GAS  /tmp/cc9h6Bqx.s 			page 39


 874              		.cfi_endproc
 875              	.LFE88:
 877              		.section	.text._ZL15MX_SDIO_SD_Initv,"ax",%progbits
 878              		.align	1
 879              		.syntax unified
 880              		.thumb
 881              		.thumb_func
 882              		.fpu softvfp
 884              	_ZL15MX_SDIO_SD_Initv:
 885              	.LFB89:
 606:Src/main.cpp  **** 
 886              		.loc 1 606 0
 887              		.cfi_startproc
 888              		@ args = 0, pretend = 0, frame = 0
 889              		@ frame_needed = 0, uses_anonymous_args = 0
 890 0000 10B5     		push	{r4, lr}
 891              	.LCFI20:
 892              		.cfi_def_cfa_offset 8
 893              		.cfi_offset 4, -8
 894              		.cfi_offset 14, -4
 615:Src/main.cpp  **** 	hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 895              		.loc 1 615 0
 896 0002 094C     		ldr	r4, .L35
 897 0004 094B     		ldr	r3, .L35+4
 898 0006 2360     		str	r3, [r4]
 616:Src/main.cpp  **** 	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 899              		.loc 1 616 0
 900 0008 0023     		movs	r3, #0
 901 000a 6360     		str	r3, [r4, #4]
 617:Src/main.cpp  **** 	hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 902              		.loc 1 617 0
 903 000c A360     		str	r3, [r4, #8]
 618:Src/main.cpp  **** 	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 904              		.loc 1 618 0
 905 000e E360     		str	r3, [r4, #12]
 619:Src/main.cpp  **** 	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 906              		.loc 1 619 0
 907 0010 2361     		str	r3, [r4, #16]
 620:Src/main.cpp  **** 	hsd.Init.ClockDiv = 0;
 908              		.loc 1 620 0
 909 0012 6361     		str	r3, [r4, #20]
 621:Src/main.cpp  **** 	if (HAL_SD_Init(&hsd) != HAL_OK)
 910              		.loc 1 621 0
 911 0014 A361     		str	r3, [r4, #24]
 622:Src/main.cpp  **** 	{
 912              		.loc 1 622 0
 913 0016 2046     		mov	r0, r4
 914 0018 FFF7FEFF 		bl	HAL_SD_Init
 915              	.LVL45:
 626:Src/main.cpp  **** 	{
 916              		.loc 1 626 0
 917 001c 4FF40061 		mov	r1, #2048
 918 0020 2046     		mov	r0, r4
 919 0022 FFF7FEFF 		bl	HAL_SD_ConfigWideBusOperation
 920              	.LVL46:
 921 0026 10BD     		pop	{r4, pc}
 922              	.L36:
ARM GAS  /tmp/cc9h6Bqx.s 			page 40


 923              		.align	2
 924              	.L35:
 925 0028 00000000 		.word	.LANCHOR6
 926 002c 00800140 		.word	1073840128
 927              		.cfi_endproc
 928              	.LFE89:
 930              		.section	.text._ZL12MX_SPI1_Initv,"ax",%progbits
 931              		.align	1
 932              		.syntax unified
 933              		.thumb
 934              		.thumb_func
 935              		.fpu softvfp
 937              	_ZL12MX_SPI1_Initv:
 938              	.LFB90:
 642:Src/main.cpp  **** 
 939              		.loc 1 642 0
 940              		.cfi_startproc
 941              		@ args = 0, pretend = 0, frame = 0
 942              		@ frame_needed = 0, uses_anonymous_args = 0
 943 0000 08B5     		push	{r3, lr}
 944              	.LCFI21:
 945              		.cfi_def_cfa_offset 8
 946              		.cfi_offset 3, -8
 947              		.cfi_offset 14, -4
 652:Src/main.cpp  **** 	hspi1.Init.Mode = SPI_MODE_MASTER;
 948              		.loc 1 652 0
 949 0002 0C48     		ldr	r0, .L39
 950 0004 0C4B     		ldr	r3, .L39+4
 951 0006 0360     		str	r3, [r0]
 653:Src/main.cpp  **** 	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 952              		.loc 1 653 0
 953 0008 4FF48273 		mov	r3, #260
 954 000c 4360     		str	r3, [r0, #4]
 654:Src/main.cpp  **** 	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 955              		.loc 1 654 0
 956 000e 0023     		movs	r3, #0
 957 0010 8360     		str	r3, [r0, #8]
 655:Src/main.cpp  **** 	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 958              		.loc 1 655 0
 959 0012 C360     		str	r3, [r0, #12]
 656:Src/main.cpp  **** 	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 960              		.loc 1 656 0
 961 0014 0361     		str	r3, [r0, #16]
 657:Src/main.cpp  **** 	hspi1.Init.NSS = SPI_NSS_SOFT;
 962              		.loc 1 657 0
 963 0016 4361     		str	r3, [r0, #20]
 658:Src/main.cpp  **** 	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 964              		.loc 1 658 0
 965 0018 4FF40072 		mov	r2, #512
 966 001c 8261     		str	r2, [r0, #24]
 659:Src/main.cpp  **** 	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 967              		.loc 1 659 0
 968 001e 0822     		movs	r2, #8
 969 0020 C261     		str	r2, [r0, #28]
 660:Src/main.cpp  **** 	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 970              		.loc 1 660 0
 971 0022 0362     		str	r3, [r0, #32]
ARM GAS  /tmp/cc9h6Bqx.s 			page 41


 661:Src/main.cpp  **** 	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 972              		.loc 1 661 0
 973 0024 4362     		str	r3, [r0, #36]
 662:Src/main.cpp  **** 	hspi1.Init.CRCPolynomial = 10;
 974              		.loc 1 662 0
 975 0026 8362     		str	r3, [r0, #40]
 663:Src/main.cpp  **** 	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 976              		.loc 1 663 0
 977 0028 0A23     		movs	r3, #10
 978 002a C362     		str	r3, [r0, #44]
 664:Src/main.cpp  **** 	{
 979              		.loc 1 664 0
 980 002c FFF7FEFF 		bl	HAL_SPI_Init
 981              	.LVL47:
 982 0030 08BD     		pop	{r3, pc}
 983              	.L40:
 984 0032 00BF     		.align	2
 985              	.L39:
 986 0034 00000000 		.word	.LANCHOR7
 987 0038 00300140 		.word	1073819648
 988              		.cfi_endproc
 989              	.LFE90:
 991              		.section	.text._ZL12MX_SPI2_Initv,"ax",%progbits
 992              		.align	1
 993              		.syntax unified
 994              		.thumb
 995              		.thumb_func
 996              		.fpu softvfp
 998              	_ZL12MX_SPI2_Initv:
 999              	.LFB91:
 680:Src/main.cpp  **** 
 1000              		.loc 1 680 0
 1001              		.cfi_startproc
 1002              		@ args = 0, pretend = 0, frame = 0
 1003              		@ frame_needed = 0, uses_anonymous_args = 0
 1004 0000 08B5     		push	{r3, lr}
 1005              	.LCFI22:
 1006              		.cfi_def_cfa_offset 8
 1007              		.cfi_offset 3, -8
 1008              		.cfi_offset 14, -4
 690:Src/main.cpp  **** 	hspi2.Init.Mode = SPI_MODE_MASTER;
 1009              		.loc 1 690 0
 1010 0002 0B48     		ldr	r0, .L43
 1011 0004 0B4B     		ldr	r3, .L43+4
 1012 0006 0360     		str	r3, [r0]
 691:Src/main.cpp  **** 	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 1013              		.loc 1 691 0
 1014 0008 4FF48273 		mov	r3, #260
 1015 000c 4360     		str	r3, [r0, #4]
 692:Src/main.cpp  **** 	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 1016              		.loc 1 692 0
 1017 000e 0023     		movs	r3, #0
 1018 0010 8360     		str	r3, [r0, #8]
 693:Src/main.cpp  **** 	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 1019              		.loc 1 693 0
 1020 0012 C360     		str	r3, [r0, #12]
 694:Src/main.cpp  **** 	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
ARM GAS  /tmp/cc9h6Bqx.s 			page 42


 1021              		.loc 1 694 0
 1022 0014 0361     		str	r3, [r0, #16]
 695:Src/main.cpp  **** 	hspi2.Init.NSS = SPI_NSS_SOFT;
 1023              		.loc 1 695 0
 1024 0016 4361     		str	r3, [r0, #20]
 696:Src/main.cpp  **** 	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 1025              		.loc 1 696 0
 1026 0018 4FF40072 		mov	r2, #512
 1027 001c 8261     		str	r2, [r0, #24]
 697:Src/main.cpp  **** 	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 1028              		.loc 1 697 0
 1029 001e C361     		str	r3, [r0, #28]
 698:Src/main.cpp  **** 	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 1030              		.loc 1 698 0
 1031 0020 0362     		str	r3, [r0, #32]
 699:Src/main.cpp  **** 	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 1032              		.loc 1 699 0
 1033 0022 4362     		str	r3, [r0, #36]
 700:Src/main.cpp  **** 	hspi2.Init.CRCPolynomial = 10;
 1034              		.loc 1 700 0
 1035 0024 8362     		str	r3, [r0, #40]
 701:Src/main.cpp  **** 	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 1036              		.loc 1 701 0
 1037 0026 0A23     		movs	r3, #10
 1038 0028 C362     		str	r3, [r0, #44]
 702:Src/main.cpp  **** 	{
 1039              		.loc 1 702 0
 1040 002a FFF7FEFF 		bl	HAL_SPI_Init
 1041              	.LVL48:
 1042 002e 08BD     		pop	{r3, pc}
 1043              	.L44:
 1044              		.align	2
 1045              	.L43:
 1046 0030 00000000 		.word	.LANCHOR8
 1047 0034 00380040 		.word	1073756160
 1048              		.cfi_endproc
 1049              	.LFE91:
 1051              		.section	.text._ZL12MX_SPI3_Initv,"ax",%progbits
 1052              		.align	1
 1053              		.syntax unified
 1054              		.thumb
 1055              		.thumb_func
 1056              		.fpu softvfp
 1058              	_ZL12MX_SPI3_Initv:
 1059              	.LFB92:
 718:Src/main.cpp  **** 
 1060              		.loc 1 718 0
 1061              		.cfi_startproc
 1062              		@ args = 0, pretend = 0, frame = 0
 1063              		@ frame_needed = 0, uses_anonymous_args = 0
 1064 0000 08B5     		push	{r3, lr}
 1065              	.LCFI23:
 1066              		.cfi_def_cfa_offset 8
 1067              		.cfi_offset 3, -8
 1068              		.cfi_offset 14, -4
 728:Src/main.cpp  **** 	hspi3.Init.Mode = SPI_MODE_MASTER;
 1069              		.loc 1 728 0
ARM GAS  /tmp/cc9h6Bqx.s 			page 43


 1070 0002 0B48     		ldr	r0, .L47
 1071 0004 0B4B     		ldr	r3, .L47+4
 1072 0006 0360     		str	r3, [r0]
 729:Src/main.cpp  **** 	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 1073              		.loc 1 729 0
 1074 0008 4FF48273 		mov	r3, #260
 1075 000c 4360     		str	r3, [r0, #4]
 730:Src/main.cpp  **** 	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 1076              		.loc 1 730 0
 1077 000e 0023     		movs	r3, #0
 1078 0010 8360     		str	r3, [r0, #8]
 731:Src/main.cpp  **** 	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 1079              		.loc 1 731 0
 1080 0012 C360     		str	r3, [r0, #12]
 732:Src/main.cpp  **** 	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 1081              		.loc 1 732 0
 1082 0014 0361     		str	r3, [r0, #16]
 733:Src/main.cpp  **** 	hspi3.Init.NSS = SPI_NSS_SOFT;
 1083              		.loc 1 733 0
 1084 0016 4361     		str	r3, [r0, #20]
 734:Src/main.cpp  **** 	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 1085              		.loc 1 734 0
 1086 0018 4FF40072 		mov	r2, #512
 1087 001c 8261     		str	r2, [r0, #24]
 735:Src/main.cpp  **** 	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 1088              		.loc 1 735 0
 1089 001e C361     		str	r3, [r0, #28]
 736:Src/main.cpp  **** 	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 1090              		.loc 1 736 0
 1091 0020 0362     		str	r3, [r0, #32]
 737:Src/main.cpp  **** 	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 1092              		.loc 1 737 0
 1093 0022 4362     		str	r3, [r0, #36]
 738:Src/main.cpp  **** 	hspi3.Init.CRCPolynomial = 10;
 1094              		.loc 1 738 0
 1095 0024 8362     		str	r3, [r0, #40]
 739:Src/main.cpp  **** 	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 1096              		.loc 1 739 0
 1097 0026 0A23     		movs	r3, #10
 1098 0028 C362     		str	r3, [r0, #44]
 740:Src/main.cpp  **** 	{
 1099              		.loc 1 740 0
 1100 002a FFF7FEFF 		bl	HAL_SPI_Init
 1101              	.LVL49:
 1102 002e 08BD     		pop	{r3, pc}
 1103              	.L48:
 1104              		.align	2
 1105              	.L47:
 1106 0030 00000000 		.word	.LANCHOR9
 1107 0034 003C0040 		.word	1073757184
 1108              		.cfi_endproc
 1109              	.LFE92:
 1111              		.section	.text._ZL12MX_TIM1_Initv,"ax",%progbits
 1112              		.align	1
 1113              		.syntax unified
 1114              		.thumb
 1115              		.thumb_func
ARM GAS  /tmp/cc9h6Bqx.s 			page 44


 1116              		.fpu softvfp
 1118              	_ZL12MX_TIM1_Initv:
 1119              	.LFB93:
 756:Src/main.cpp  **** 
 1120              		.loc 1 756 0
 1121              		.cfi_startproc
 1122              		@ args = 0, pretend = 0, frame = 72
 1123              		@ frame_needed = 0, uses_anonymous_args = 0
 1124 0000 30B5     		push	{r4, r5, lr}
 1125              	.LCFI24:
 1126              		.cfi_def_cfa_offset 12
 1127              		.cfi_offset 4, -12
 1128              		.cfi_offset 5, -8
 1129              		.cfi_offset 14, -4
 1130 0002 93B0     		sub	sp, sp, #76
 1131              	.LCFI25:
 1132              		.cfi_def_cfa_offset 88
 762:Src/main.cpp  **** 	TIM_OC_InitTypeDef sConfigOC = {0};
 1133              		.loc 1 762 0
 1134 0004 0024     		movs	r4, #0
 1135 0006 1094     		str	r4, [sp, #64]
 1136 0008 1194     		str	r4, [sp, #68]
 763:Src/main.cpp  **** 	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1137              		.loc 1 763 0
 1138 000a 0994     		str	r4, [sp, #36]
 1139 000c 0A94     		str	r4, [sp, #40]
 1140 000e 0B94     		str	r4, [sp, #44]
 1141 0010 0C94     		str	r4, [sp, #48]
 1142 0012 0D94     		str	r4, [sp, #52]
 1143 0014 0E94     		str	r4, [sp, #56]
 1144 0016 0F94     		str	r4, [sp, #60]
 764:Src/main.cpp  **** 
 1145              		.loc 1 764 0
 1146 0018 2022     		movs	r2, #32
 1147 001a 2146     		mov	r1, r4
 1148 001c 01A8     		add	r0, sp, #4
 1149 001e FFF7FEFF 		bl	memset
 1150              	.LVL50:
 769:Src/main.cpp  **** 	htim1.Init.Prescaler = 0;
 1151              		.loc 1 769 0
 1152 0022 184D     		ldr	r5, .L51
 1153 0024 184B     		ldr	r3, .L51+4
 1154 0026 2B60     		str	r3, [r5]
 770:Src/main.cpp  **** 	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 1155              		.loc 1 770 0
 1156 0028 6C60     		str	r4, [r5, #4]
 771:Src/main.cpp  **** 	htim1.Init.Period = 0;
 1157              		.loc 1 771 0
 1158 002a AC60     		str	r4, [r5, #8]
 772:Src/main.cpp  **** 	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1159              		.loc 1 772 0
 1160 002c EC60     		str	r4, [r5, #12]
 773:Src/main.cpp  **** 	htim1.Init.RepetitionCounter = 0;
 1161              		.loc 1 773 0
 1162 002e 2C61     		str	r4, [r5, #16]
 774:Src/main.cpp  **** 	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1163              		.loc 1 774 0
ARM GAS  /tmp/cc9h6Bqx.s 			page 45


 1164 0030 6C61     		str	r4, [r5, #20]
 775:Src/main.cpp  **** 	if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 1165              		.loc 1 775 0
 1166 0032 AC61     		str	r4, [r5, #24]
 776:Src/main.cpp  **** 	{
 1167              		.loc 1 776 0
 1168 0034 2846     		mov	r0, r5
 1169 0036 FFF7FEFF 		bl	HAL_TIM_OC_Init
 1170              	.LVL51:
 780:Src/main.cpp  **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1171              		.loc 1 780 0
 1172 003a 1094     		str	r4, [sp, #64]
 781:Src/main.cpp  **** 	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1173              		.loc 1 781 0
 1174 003c 1194     		str	r4, [sp, #68]
 782:Src/main.cpp  **** 	{
 1175              		.loc 1 782 0
 1176 003e 10A9     		add	r1, sp, #64
 1177 0040 2846     		mov	r0, r5
 1178 0042 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1179              	.LVL52:
 786:Src/main.cpp  **** 	sConfigOC.Pulse = 0;
 1180              		.loc 1 786 0
 1181 0046 0994     		str	r4, [sp, #36]
 787:Src/main.cpp  **** 	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1182              		.loc 1 787 0
 1183 0048 0A94     		str	r4, [sp, #40]
 788:Src/main.cpp  **** 	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1184              		.loc 1 788 0
 1185 004a 0B94     		str	r4, [sp, #44]
 789:Src/main.cpp  **** 	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1186              		.loc 1 789 0
 1187 004c 0C94     		str	r4, [sp, #48]
 790:Src/main.cpp  **** 	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1188              		.loc 1 790 0
 1189 004e 0D94     		str	r4, [sp, #52]
 791:Src/main.cpp  **** 	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1190              		.loc 1 791 0
 1191 0050 0E94     		str	r4, [sp, #56]
 792:Src/main.cpp  **** 	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1192              		.loc 1 792 0
 1193 0052 0F94     		str	r4, [sp, #60]
 793:Src/main.cpp  **** 	{
 1194              		.loc 1 793 0
 1195 0054 2246     		mov	r2, r4
 1196 0056 09A9     		add	r1, sp, #36
 1197 0058 2846     		mov	r0, r5
 1198 005a FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 1199              	.LVL53:
 797:Src/main.cpp  **** 	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1200              		.loc 1 797 0
 1201 005e 0194     		str	r4, [sp, #4]
 798:Src/main.cpp  **** 	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1202              		.loc 1 798 0
 1203 0060 0294     		str	r4, [sp, #8]
 799:Src/main.cpp  **** 	sBreakDeadTimeConfig.DeadTime = 0;
 1204              		.loc 1 799 0
ARM GAS  /tmp/cc9h6Bqx.s 			page 46


 1205 0062 0394     		str	r4, [sp, #12]
 800:Src/main.cpp  **** 	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1206              		.loc 1 800 0
 1207 0064 0494     		str	r4, [sp, #16]
 801:Src/main.cpp  **** 	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1208              		.loc 1 801 0
 1209 0066 0594     		str	r4, [sp, #20]
 802:Src/main.cpp  **** 	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1210              		.loc 1 802 0
 1211 0068 4FF40053 		mov	r3, #8192
 1212 006c 0693     		str	r3, [sp, #24]
 803:Src/main.cpp  **** 	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1213              		.loc 1 803 0
 1214 006e 0894     		str	r4, [sp, #32]
 804:Src/main.cpp  **** 	{
 1215              		.loc 1 804 0
 1216 0070 01A9     		add	r1, sp, #4
 1217 0072 2846     		mov	r0, r5
 1218 0074 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 1219              	.LVL54:
 811:Src/main.cpp  **** 
 1220              		.loc 1 811 0
 1221 0078 2846     		mov	r0, r5
 1222 007a FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1223              	.LVL55:
 813:Src/main.cpp  **** 
 1224              		.loc 1 813 0
 1225 007e 13B0     		add	sp, sp, #76
 1226              	.LCFI26:
 1227              		.cfi_def_cfa_offset 12
 1228              		@ sp needed
 1229 0080 30BD     		pop	{r4, r5, pc}
 1230              	.L52:
 1231 0082 00BF     		.align	2
 1232              	.L51:
 1233 0084 00000000 		.word	.LANCHOR10
 1234 0088 002C0140 		.word	1073818624
 1235              		.cfi_endproc
 1236              	.LFE93:
 1238              		.section	.text._ZL12MX_TIM2_Initv,"ax",%progbits
 1239              		.align	1
 1240              		.syntax unified
 1241              		.thumb
 1242              		.thumb_func
 1243              		.fpu softvfp
 1245              	_ZL12MX_TIM2_Initv:
 1246              	.LFB94:
 821:Src/main.cpp  **** 
 1247              		.loc 1 821 0
 1248              		.cfi_startproc
 1249              		@ args = 0, pretend = 0, frame = 40
 1250              		@ frame_needed = 0, uses_anonymous_args = 0
 1251 0000 30B5     		push	{r4, r5, lr}
 1252              	.LCFI27:
 1253              		.cfi_def_cfa_offset 12
 1254              		.cfi_offset 4, -12
 1255              		.cfi_offset 5, -8
ARM GAS  /tmp/cc9h6Bqx.s 			page 47


 1256              		.cfi_offset 14, -4
 1257 0002 8BB0     		sub	sp, sp, #44
 1258              	.LCFI28:
 1259              		.cfi_def_cfa_offset 56
 827:Src/main.cpp  **** 	TIM_OC_InitTypeDef sConfigOC = {0};
 1260              		.loc 1 827 0
 1261 0004 0024     		movs	r4, #0
 1262 0006 0894     		str	r4, [sp, #32]
 1263 0008 0994     		str	r4, [sp, #36]
 828:Src/main.cpp  **** 
 1264              		.loc 1 828 0
 1265 000a 0194     		str	r4, [sp, #4]
 1266 000c 0294     		str	r4, [sp, #8]
 1267 000e 0394     		str	r4, [sp, #12]
 1268 0010 0494     		str	r4, [sp, #16]
 1269 0012 0594     		str	r4, [sp, #20]
 1270 0014 0694     		str	r4, [sp, #24]
 1271 0016 0794     		str	r4, [sp, #28]
 833:Src/main.cpp  **** 	htim2.Init.Prescaler = 0;
 1272              		.loc 1 833 0
 1273 0018 0F4D     		ldr	r5, .L55
 1274 001a 4FF08043 		mov	r3, #1073741824
 1275 001e 2B60     		str	r3, [r5]
 834:Src/main.cpp  **** 	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1276              		.loc 1 834 0
 1277 0020 6C60     		str	r4, [r5, #4]
 835:Src/main.cpp  **** 	htim2.Init.Period = 0;
 1278              		.loc 1 835 0
 1279 0022 AC60     		str	r4, [r5, #8]
 836:Src/main.cpp  **** 	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1280              		.loc 1 836 0
 1281 0024 EC60     		str	r4, [r5, #12]
 837:Src/main.cpp  **** 	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1282              		.loc 1 837 0
 1283 0026 2C61     		str	r4, [r5, #16]
 838:Src/main.cpp  **** 	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 1284              		.loc 1 838 0
 1285 0028 AC61     		str	r4, [r5, #24]
 839:Src/main.cpp  **** 	{
 1286              		.loc 1 839 0
 1287 002a 2846     		mov	r0, r5
 1288 002c FFF7FEFF 		bl	HAL_TIM_OC_Init
 1289              	.LVL56:
 843:Src/main.cpp  **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1290              		.loc 1 843 0
 1291 0030 0894     		str	r4, [sp, #32]
 844:Src/main.cpp  **** 	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1292              		.loc 1 844 0
 1293 0032 0994     		str	r4, [sp, #36]
 845:Src/main.cpp  **** 	{
 1294              		.loc 1 845 0
 1295 0034 08A9     		add	r1, sp, #32
 1296 0036 2846     		mov	r0, r5
 1297 0038 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1298              	.LVL57:
 849:Src/main.cpp  **** 	sConfigOC.Pulse = 0;
 1299              		.loc 1 849 0
ARM GAS  /tmp/cc9h6Bqx.s 			page 48


 1300 003c 0194     		str	r4, [sp, #4]
 850:Src/main.cpp  **** 	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1301              		.loc 1 850 0
 1302 003e 0294     		str	r4, [sp, #8]
 851:Src/main.cpp  **** 	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1303              		.loc 1 851 0
 1304 0040 0394     		str	r4, [sp, #12]
 852:Src/main.cpp  **** 	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1305              		.loc 1 852 0
 1306 0042 0594     		str	r4, [sp, #20]
 853:Src/main.cpp  **** 	{
 1307              		.loc 1 853 0
 1308 0044 2246     		mov	r2, r4
 1309 0046 01A9     		add	r1, sp, #4
 1310 0048 2846     		mov	r0, r5
 1311 004a FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 1312              	.LVL58:
 860:Src/main.cpp  **** 
 1313              		.loc 1 860 0
 1314 004e 2846     		mov	r0, r5
 1315 0050 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1316              	.LVL59:
 862:Src/main.cpp  **** 
 1317              		.loc 1 862 0
 1318 0054 0BB0     		add	sp, sp, #44
 1319              	.LCFI29:
 1320              		.cfi_def_cfa_offset 12
 1321              		@ sp needed
 1322 0056 30BD     		pop	{r4, r5, pc}
 1323              	.L56:
 1324              		.align	2
 1325              	.L55:
 1326 0058 00000000 		.word	.LANCHOR11
 1327              		.cfi_endproc
 1328              	.LFE94:
 1330              		.section	.text._ZL12MX_TIM3_Initv,"ax",%progbits
 1331              		.align	1
 1332              		.syntax unified
 1333              		.thumb
 1334              		.thumb_func
 1335              		.fpu softvfp
 1337              	_ZL12MX_TIM3_Initv:
 1338              	.LFB95:
 870:Src/main.cpp  **** 
 1339              		.loc 1 870 0
 1340              		.cfi_startproc
 1341              		@ args = 0, pretend = 0, frame = 40
 1342              		@ frame_needed = 0, uses_anonymous_args = 0
 1343 0000 30B5     		push	{r4, r5, lr}
 1344              	.LCFI30:
 1345              		.cfi_def_cfa_offset 12
 1346              		.cfi_offset 4, -12
 1347              		.cfi_offset 5, -8
 1348              		.cfi_offset 14, -4
 1349 0002 8BB0     		sub	sp, sp, #44
 1350              	.LCFI31:
 1351              		.cfi_def_cfa_offset 56
ARM GAS  /tmp/cc9h6Bqx.s 			page 49


 876:Src/main.cpp  **** 	TIM_OC_InitTypeDef sConfigOC = {0};
 1352              		.loc 1 876 0
 1353 0004 0024     		movs	r4, #0
 1354 0006 0894     		str	r4, [sp, #32]
 1355 0008 0994     		str	r4, [sp, #36]
 877:Src/main.cpp  **** 
 1356              		.loc 1 877 0
 1357 000a 0194     		str	r4, [sp, #4]
 1358 000c 0294     		str	r4, [sp, #8]
 1359 000e 0394     		str	r4, [sp, #12]
 1360 0010 0494     		str	r4, [sp, #16]
 1361 0012 0594     		str	r4, [sp, #20]
 1362 0014 0694     		str	r4, [sp, #24]
 1363 0016 0794     		str	r4, [sp, #28]
 882:Src/main.cpp  **** 	htim3.Init.Prescaler = 0;
 1364              		.loc 1 882 0
 1365 0018 0F4D     		ldr	r5, .L59
 1366 001a 104B     		ldr	r3, .L59+4
 1367 001c 2B60     		str	r3, [r5]
 883:Src/main.cpp  **** 	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 1368              		.loc 1 883 0
 1369 001e 6C60     		str	r4, [r5, #4]
 884:Src/main.cpp  **** 	htim3.Init.Period = 0;
 1370              		.loc 1 884 0
 1371 0020 AC60     		str	r4, [r5, #8]
 885:Src/main.cpp  **** 	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1372              		.loc 1 885 0
 1373 0022 EC60     		str	r4, [r5, #12]
 886:Src/main.cpp  **** 	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1374              		.loc 1 886 0
 1375 0024 2C61     		str	r4, [r5, #16]
 887:Src/main.cpp  **** 	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 1376              		.loc 1 887 0
 1377 0026 AC61     		str	r4, [r5, #24]
 888:Src/main.cpp  **** 	{
 1378              		.loc 1 888 0
 1379 0028 2846     		mov	r0, r5
 1380 002a FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1381              	.LVL60:
 892:Src/main.cpp  **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1382              		.loc 1 892 0
 1383 002e 0894     		str	r4, [sp, #32]
 893:Src/main.cpp  **** 	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 1384              		.loc 1 893 0
 1385 0030 0994     		str	r4, [sp, #36]
 894:Src/main.cpp  **** 	{
 1386              		.loc 1 894 0
 1387 0032 08A9     		add	r1, sp, #32
 1388 0034 2846     		mov	r0, r5
 1389 0036 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1390              	.LVL61:
 898:Src/main.cpp  **** 	sConfigOC.Pulse = 0;
 1391              		.loc 1 898 0
 1392 003a 6023     		movs	r3, #96
 1393 003c 0193     		str	r3, [sp, #4]
 899:Src/main.cpp  **** 	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1394              		.loc 1 899 0
ARM GAS  /tmp/cc9h6Bqx.s 			page 50


 1395 003e 0294     		str	r4, [sp, #8]
 900:Src/main.cpp  **** 	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1396              		.loc 1 900 0
 1397 0040 0394     		str	r4, [sp, #12]
 901:Src/main.cpp  **** 	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1398              		.loc 1 901 0
 1399 0042 0594     		str	r4, [sp, #20]
 902:Src/main.cpp  **** 	{
 1400              		.loc 1 902 0
 1401 0044 2246     		mov	r2, r4
 1402 0046 01A9     		add	r1, sp, #4
 1403 0048 2846     		mov	r0, r5
 1404 004a FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1405              	.LVL62:
 909:Src/main.cpp  **** 
 1406              		.loc 1 909 0
 1407 004e 2846     		mov	r0, r5
 1408 0050 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1409              	.LVL63:
 911:Src/main.cpp  **** 
 1410              		.loc 1 911 0
 1411 0054 0BB0     		add	sp, sp, #44
 1412              	.LCFI32:
 1413              		.cfi_def_cfa_offset 12
 1414              		@ sp needed
 1415 0056 30BD     		pop	{r4, r5, pc}
 1416              	.L60:
 1417              		.align	2
 1418              	.L59:
 1419 0058 00000000 		.word	.LANCHOR12
 1420 005c 00040040 		.word	1073742848
 1421              		.cfi_endproc
 1422              	.LFE95:
 1424              		.section	.text._ZL12MX_TIM4_Initv,"ax",%progbits
 1425              		.align	1
 1426              		.syntax unified
 1427              		.thumb
 1428              		.thumb_func
 1429              		.fpu softvfp
 1431              	_ZL12MX_TIM4_Initv:
 1432              	.LFB96:
 919:Src/main.cpp  **** 
 1433              		.loc 1 919 0
 1434              		.cfi_startproc
 1435              		@ args = 0, pretend = 0, frame = 40
 1436              		@ frame_needed = 0, uses_anonymous_args = 0
 1437 0000 30B5     		push	{r4, r5, lr}
 1438              	.LCFI33:
 1439              		.cfi_def_cfa_offset 12
 1440              		.cfi_offset 4, -12
 1441              		.cfi_offset 5, -8
 1442              		.cfi_offset 14, -4
 1443 0002 8BB0     		sub	sp, sp, #44
 1444              	.LCFI34:
 1445              		.cfi_def_cfa_offset 56
 925:Src/main.cpp  **** 	TIM_OC_InitTypeDef sConfigOC = {0};
 1446              		.loc 1 925 0
ARM GAS  /tmp/cc9h6Bqx.s 			page 51


 1447 0004 0024     		movs	r4, #0
 1448 0006 0894     		str	r4, [sp, #32]
 1449 0008 0994     		str	r4, [sp, #36]
 926:Src/main.cpp  **** 
 1450              		.loc 1 926 0
 1451 000a 0194     		str	r4, [sp, #4]
 1452 000c 0294     		str	r4, [sp, #8]
 1453 000e 0394     		str	r4, [sp, #12]
 1454 0010 0494     		str	r4, [sp, #16]
 1455 0012 0594     		str	r4, [sp, #20]
 1456 0014 0694     		str	r4, [sp, #24]
 1457 0016 0794     		str	r4, [sp, #28]
 931:Src/main.cpp  **** 	htim4.Init.Prescaler = 0;
 1458              		.loc 1 931 0
 1459 0018 0F4D     		ldr	r5, .L63
 1460 001a 104B     		ldr	r3, .L63+4
 1461 001c 2B60     		str	r3, [r5]
 932:Src/main.cpp  **** 	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 1462              		.loc 1 932 0
 1463 001e 6C60     		str	r4, [r5, #4]
 933:Src/main.cpp  **** 	htim4.Init.Period = 0;
 1464              		.loc 1 933 0
 1465 0020 AC60     		str	r4, [r5, #8]
 934:Src/main.cpp  **** 	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1466              		.loc 1 934 0
 1467 0022 EC60     		str	r4, [r5, #12]
 935:Src/main.cpp  **** 	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1468              		.loc 1 935 0
 1469 0024 2C61     		str	r4, [r5, #16]
 936:Src/main.cpp  **** 	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 1470              		.loc 1 936 0
 1471 0026 AC61     		str	r4, [r5, #24]
 937:Src/main.cpp  **** 	{
 1472              		.loc 1 937 0
 1473 0028 2846     		mov	r0, r5
 1474 002a FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1475              	.LVL64:
 941:Src/main.cpp  **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1476              		.loc 1 941 0
 1477 002e 0894     		str	r4, [sp, #32]
 942:Src/main.cpp  **** 	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 1478              		.loc 1 942 0
 1479 0030 0994     		str	r4, [sp, #36]
 943:Src/main.cpp  **** 	{
 1480              		.loc 1 943 0
 1481 0032 08A9     		add	r1, sp, #32
 1482 0034 2846     		mov	r0, r5
 1483 0036 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1484              	.LVL65:
 947:Src/main.cpp  **** 	sConfigOC.Pulse = 0;
 1485              		.loc 1 947 0
 1486 003a 6023     		movs	r3, #96
 1487 003c 0193     		str	r3, [sp, #4]
 948:Src/main.cpp  **** 	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1488              		.loc 1 948 0
 1489 003e 0294     		str	r4, [sp, #8]
 949:Src/main.cpp  **** 	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
ARM GAS  /tmp/cc9h6Bqx.s 			page 52


 1490              		.loc 1 949 0
 1491 0040 0394     		str	r4, [sp, #12]
 950:Src/main.cpp  **** 	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1492              		.loc 1 950 0
 1493 0042 0594     		str	r4, [sp, #20]
 951:Src/main.cpp  **** 	{
 1494              		.loc 1 951 0
 1495 0044 2246     		mov	r2, r4
 1496 0046 01A9     		add	r1, sp, #4
 1497 0048 2846     		mov	r0, r5
 1498 004a FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1499              	.LVL66:
 958:Src/main.cpp  **** 
 1500              		.loc 1 958 0
 1501 004e 2846     		mov	r0, r5
 1502 0050 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1503              	.LVL67:
 960:Src/main.cpp  **** 
 1504              		.loc 1 960 0
 1505 0054 0BB0     		add	sp, sp, #44
 1506              	.LCFI35:
 1507              		.cfi_def_cfa_offset 12
 1508              		@ sp needed
 1509 0056 30BD     		pop	{r4, r5, pc}
 1510              	.L64:
 1511              		.align	2
 1512              	.L63:
 1513 0058 00000000 		.word	.LANCHOR13
 1514 005c 00080040 		.word	1073743872
 1515              		.cfi_endproc
 1516              	.LFE96:
 1518              		.section	.text._ZL19MX_USART1_UART_Initv,"ax",%progbits
 1519              		.align	1
 1520              		.syntax unified
 1521              		.thumb
 1522              		.thumb_func
 1523              		.fpu softvfp
 1525              	_ZL19MX_USART1_UART_Initv:
 1526              	.LFB97:
 968:Src/main.cpp  **** 
 1527              		.loc 1 968 0
 1528              		.cfi_startproc
 1529              		@ args = 0, pretend = 0, frame = 0
 1530              		@ frame_needed = 0, uses_anonymous_args = 0
 1531 0000 08B5     		push	{r3, lr}
 1532              	.LCFI36:
 1533              		.cfi_def_cfa_offset 8
 1534              		.cfi_offset 3, -8
 1535              		.cfi_offset 14, -4
 977:Src/main.cpp  **** 	huart1.Init.BaudRate = 115200;
 1536              		.loc 1 977 0
 1537 0002 0848     		ldr	r0, .L67
 1538 0004 084B     		ldr	r3, .L67+4
 1539 0006 0360     		str	r3, [r0]
 978:Src/main.cpp  **** 	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 1540              		.loc 1 978 0
 1541 0008 4FF4E133 		mov	r3, #115200
ARM GAS  /tmp/cc9h6Bqx.s 			page 53


 1542 000c 4360     		str	r3, [r0, #4]
 979:Src/main.cpp  **** 	huart1.Init.StopBits = UART_STOPBITS_1;
 1543              		.loc 1 979 0
 1544 000e 0023     		movs	r3, #0
 1545 0010 8360     		str	r3, [r0, #8]
 980:Src/main.cpp  **** 	huart1.Init.Parity = UART_PARITY_NONE;
 1546              		.loc 1 980 0
 1547 0012 C360     		str	r3, [r0, #12]
 981:Src/main.cpp  **** 	huart1.Init.Mode = UART_MODE_TX_RX;
 1548              		.loc 1 981 0
 1549 0014 0361     		str	r3, [r0, #16]
 982:Src/main.cpp  **** 	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1550              		.loc 1 982 0
 1551 0016 0C22     		movs	r2, #12
 1552 0018 4261     		str	r2, [r0, #20]
 983:Src/main.cpp  **** 	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 1553              		.loc 1 983 0
 1554 001a 8361     		str	r3, [r0, #24]
 984:Src/main.cpp  **** 	if (HAL_UART_Init(&huart1) != HAL_OK)
 1555              		.loc 1 984 0
 1556 001c C361     		str	r3, [r0, #28]
 985:Src/main.cpp  **** 	{
 1557              		.loc 1 985 0
 1558 001e FFF7FEFF 		bl	HAL_UART_Init
 1559              	.LVL68:
 1560 0022 08BD     		pop	{r3, pc}
 1561              	.L68:
 1562              		.align	2
 1563              	.L67:
 1564 0024 00000000 		.word	.LANCHOR14
 1565 0028 00380140 		.word	1073821696
 1566              		.cfi_endproc
 1567              	.LFE97:
 1569              		.section	.text._ZL19MX_USART2_UART_Initv,"ax",%progbits
 1570              		.align	1
 1571              		.syntax unified
 1572              		.thumb
 1573              		.thumb_func
 1574              		.fpu softvfp
 1576              	_ZL19MX_USART2_UART_Initv:
 1577              	.LFB98:
1002:Src/main.cpp  **** 
 1578              		.loc 1 1002 0
 1579              		.cfi_startproc
 1580              		@ args = 0, pretend = 0, frame = 0
 1581              		@ frame_needed = 0, uses_anonymous_args = 0
 1582 0000 08B5     		push	{r3, lr}
 1583              	.LCFI37:
 1584              		.cfi_def_cfa_offset 8
 1585              		.cfi_offset 3, -8
 1586              		.cfi_offset 14, -4
1011:Src/main.cpp  **** 	huart2.Init.BaudRate = 115200;
 1587              		.loc 1 1011 0
 1588 0002 0848     		ldr	r0, .L71
 1589 0004 084B     		ldr	r3, .L71+4
 1590 0006 0360     		str	r3, [r0]
1012:Src/main.cpp  **** 	huart2.Init.WordLength = UART_WORDLENGTH_8B;
ARM GAS  /tmp/cc9h6Bqx.s 			page 54


 1591              		.loc 1 1012 0
 1592 0008 4FF4E133 		mov	r3, #115200
 1593 000c 4360     		str	r3, [r0, #4]
1013:Src/main.cpp  **** 	huart2.Init.StopBits = UART_STOPBITS_1;
 1594              		.loc 1 1013 0
 1595 000e 0023     		movs	r3, #0
 1596 0010 8360     		str	r3, [r0, #8]
1014:Src/main.cpp  **** 	huart2.Init.Parity = UART_PARITY_NONE;
 1597              		.loc 1 1014 0
 1598 0012 C360     		str	r3, [r0, #12]
1015:Src/main.cpp  **** 	huart2.Init.Mode = UART_MODE_TX_RX;
 1599              		.loc 1 1015 0
 1600 0014 0361     		str	r3, [r0, #16]
1016:Src/main.cpp  **** 	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1601              		.loc 1 1016 0
 1602 0016 0C22     		movs	r2, #12
 1603 0018 4261     		str	r2, [r0, #20]
1017:Src/main.cpp  **** 	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1604              		.loc 1 1017 0
 1605 001a 8361     		str	r3, [r0, #24]
1018:Src/main.cpp  **** 	if (HAL_UART_Init(&huart2) != HAL_OK)
 1606              		.loc 1 1018 0
 1607 001c C361     		str	r3, [r0, #28]
1019:Src/main.cpp  **** 	{
 1608              		.loc 1 1019 0
 1609 001e FFF7FEFF 		bl	HAL_UART_Init
 1610              	.LVL69:
 1611 0022 08BD     		pop	{r3, pc}
 1612              	.L72:
 1613              		.align	2
 1614              	.L71:
 1615 0024 00000000 		.word	.LANCHOR15
 1616 0028 00440040 		.word	1073759232
 1617              		.cfi_endproc
 1618              	.LFE98:
 1620              		.section	.text._ZL19MX_USART3_UART_Initv,"ax",%progbits
 1621              		.align	1
 1622              		.syntax unified
 1623              		.thumb
 1624              		.thumb_func
 1625              		.fpu softvfp
 1627              	_ZL19MX_USART3_UART_Initv:
 1628              	.LFB99:
1035:Src/main.cpp  **** 
 1629              		.loc 1 1035 0
 1630              		.cfi_startproc
 1631              		@ args = 0, pretend = 0, frame = 0
 1632              		@ frame_needed = 0, uses_anonymous_args = 0
 1633 0000 08B5     		push	{r3, lr}
 1634              	.LCFI38:
 1635              		.cfi_def_cfa_offset 8
 1636              		.cfi_offset 3, -8
 1637              		.cfi_offset 14, -4
1044:Src/main.cpp  **** 	huart3.Init.BaudRate = 115200;
 1638              		.loc 1 1044 0
 1639 0002 0848     		ldr	r0, .L75
 1640 0004 084B     		ldr	r3, .L75+4
ARM GAS  /tmp/cc9h6Bqx.s 			page 55


 1641 0006 0360     		str	r3, [r0]
1045:Src/main.cpp  **** 	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 1642              		.loc 1 1045 0
 1643 0008 4FF4E133 		mov	r3, #115200
 1644 000c 4360     		str	r3, [r0, #4]
1046:Src/main.cpp  **** 	huart3.Init.StopBits = UART_STOPBITS_1;
 1645              		.loc 1 1046 0
 1646 000e 0023     		movs	r3, #0
 1647 0010 8360     		str	r3, [r0, #8]
1047:Src/main.cpp  **** 	huart3.Init.Parity = UART_PARITY_NONE;
 1648              		.loc 1 1047 0
 1649 0012 C360     		str	r3, [r0, #12]
1048:Src/main.cpp  **** 	huart3.Init.Mode = UART_MODE_TX_RX;
 1650              		.loc 1 1048 0
 1651 0014 0361     		str	r3, [r0, #16]
1049:Src/main.cpp  **** 	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1652              		.loc 1 1049 0
 1653 0016 0C22     		movs	r2, #12
 1654 0018 4261     		str	r2, [r0, #20]
1050:Src/main.cpp  **** 	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 1655              		.loc 1 1050 0
 1656 001a 8361     		str	r3, [r0, #24]
1051:Src/main.cpp  **** 	if (HAL_UART_Init(&huart3) != HAL_OK)
 1657              		.loc 1 1051 0
 1658 001c C361     		str	r3, [r0, #28]
1052:Src/main.cpp  **** 	{
 1659              		.loc 1 1052 0
 1660 001e FFF7FEFF 		bl	HAL_UART_Init
 1661              	.LVL70:
 1662 0022 08BD     		pop	{r3, pc}
 1663              	.L76:
 1664              		.align	2
 1665              	.L75:
 1666 0024 00000000 		.word	.LANCHOR16
 1667 0028 00480040 		.word	1073760256
 1668              		.cfi_endproc
 1669              	.LFE99:
 1671              		.section	.text._Z41__static_initialization_and_destruction_0ii,"ax",%progbits
 1672              		.align	1
 1673              		.syntax unified
 1674              		.thumb
 1675              		.thumb_func
 1676              		.fpu softvfp
 1678              	_Z41__static_initialization_and_destruction_0ii:
 1679              	.LFB105:
1189:Src/main.cpp  **** 
1190:Src/main.cpp  **** /* USER CODE BEGIN 4 */
1191:Src/main.cpp  **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
1192:Src/main.cpp  **** {
1193:Src/main.cpp  **** 	rx_buffer.push(rx_char);
1194:Src/main.cpp  **** 	tx_buffer.push(rx_char);
1195:Src/main.cpp  **** 	HAL_UART_Receive_IT(huart, &rx_char, 1);
1196:Src/main.cpp  **** }
1197:Src/main.cpp  **** 
1198:Src/main.cpp  **** void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
1199:Src/main.cpp  **** {
1200:Src/main.cpp  **** 	uint8_t ph;
ARM GAS  /tmp/cc9h6Bqx.s 			page 56


1201:Src/main.cpp  **** 	if(tx_buffer.pop(&ph) == 0)
1202:Src/main.cpp  **** 		HAL_UART_Transmit_IT(huart, &ph, 1);
1203:Src/main.cpp  **** 	else
1204:Src/main.cpp  **** 		transmitting = 0;
1205:Src/main.cpp  **** }
1206:Src/main.cpp  **** 
1207:Src/main.cpp  **** /* USER CODE END 4 */
1208:Src/main.cpp  **** 
1209:Src/main.cpp  **** /**
1210:Src/main.cpp  ****   * @brief  This function is executed in case of error occurrence.
1211:Src/main.cpp  ****   * @retval None
1212:Src/main.cpp  ****   */
1213:Src/main.cpp  **** void Error_Handler(void)
1214:Src/main.cpp  **** {
1215:Src/main.cpp  **** 	/* USER CODE BEGIN Error_Handler_Debug */
1216:Src/main.cpp  **** 	/* User can add his own implementation to report the HAL error return state */
1217:Src/main.cpp  **** 
1218:Src/main.cpp  **** 	/* USER CODE END Error_Handler_Debug */
1219:Src/main.cpp  **** }
 1680              		.loc 1 1219 0
 1681              		.cfi_startproc
 1682              		@ args = 0, pretend = 0, frame = 0
 1683              		@ frame_needed = 0, uses_anonymous_args = 0
 1684              	.LVL71:
 1685 0000 0128     		cmp	r0, #1
 1686 0002 00D0     		beq	.L87
 1687 0004 7047     		bx	lr
 1688              	.L87:
 1689              		.loc 1 1219 0 is_stmt 0 discriminator 1
 1690 0006 08B5     		push	{r3, lr}
 1691              	.LCFI39:
 1692              		.cfi_def_cfa_offset 8
 1693              		.cfi_offset 3, -8
 1694              		.cfi_offset 14, -4
 1695              		.loc 1 1219 0 is_stmt 1 discriminator 1
 1696 0008 4FF6FF73 		movw	r3, #65535
 1697 000c 9942     		cmp	r1, r3
 1698 000e 00D0     		beq	.L88
 1699              	.LVL72:
 1700              	.L77:
 1701 0010 08BD     		pop	{r3, pc}
 1702              	.LVL73:
 1703              	.L88:
 1704              	.LBB38:
 1705              	.LBB39:
 1706              	.LBB40:
 1707              	.LBB41:
 1708              	.LBB42:
 1709              		.file 2 "Inc/FwLogger.h"
   1:Inc/FwLogger.h **** #ifndef FWLOGGER_H
   2:Inc/FwLogger.h **** #define FWLOGGER_H
   3:Inc/FwLogger.h **** 
   4:Inc/FwLogger.h **** #include <cstdint>
   5:Inc/FwLogger.h **** #include <cstring>
   6:Inc/FwLogger.h **** 
   7:Inc/FwLogger.h **** struct fixed_string
   8:Inc/FwLogger.h **** {
ARM GAS  /tmp/cc9h6Bqx.s 			page 57


   9:Inc/FwLogger.h **** 	fixed_string()
  10:Inc/FwLogger.h **** 	{
  11:Inc/FwLogger.h **** 		reset();
  12:Inc/FwLogger.h **** 	}
  13:Inc/FwLogger.h **** 	uint8_t idx;
  14:Inc/FwLogger.h **** 	uint8_t buf[128];
  15:Inc/FwLogger.h **** 	int8_t push(uint8_t val)
  16:Inc/FwLogger.h **** 	{
  17:Inc/FwLogger.h **** 		buf[idx++]=val;
  18:Inc/FwLogger.h **** 	}
  19:Inc/FwLogger.h **** 	void reset()
  20:Inc/FwLogger.h **** 	{
  21:Inc/FwLogger.h **** 		idx = 0;
  22:Inc/FwLogger.h **** 		for(int i = 0; i < 128; ++i) buf[i] = 0;
  23:Inc/FwLogger.h **** 	}
  24:Inc/FwLogger.h **** };
  25:Inc/FwLogger.h **** 
  26:Inc/FwLogger.h **** struct circular_buffer
  27:Inc/FwLogger.h **** {
  28:Inc/FwLogger.h **** public:
  29:Inc/FwLogger.h **** 	circular_buffer()
  30:Inc/FwLogger.h **** 	{
  31:Inc/FwLogger.h **** 		reset();
  32:Inc/FwLogger.h **** 	}
  33:Inc/FwLogger.h **** 
  34:Inc/FwLogger.h **** 	int8_t push(uint8_t val)
  35:Inc/FwLogger.h **** 	{
  36:Inc/FwLogger.h **** 
  37:Inc/FwLogger.h **** 		uint8_t new_write = (write_ptr+1)%128;
  38:Inc/FwLogger.h **** 		if(full)
  39:Inc/FwLogger.h **** 			return -1;
  40:Inc/FwLogger.h **** 		buffer[write_ptr] = val;
  41:Inc/FwLogger.h **** 		write_ptr = new_write;
  42:Inc/FwLogger.h **** 		full = write_ptr == read_ptr;
  43:Inc/FwLogger.h **** 		return 0;
  44:Inc/FwLogger.h **** 	}
  45:Inc/FwLogger.h **** 	int8_t pop(uint8_t* ph)
  46:Inc/FwLogger.h **** 	{
  47:Inc/FwLogger.h **** 		if(read_ptr == write_ptr && !full)
  48:Inc/FwLogger.h **** 			return -1;
  49:Inc/FwLogger.h **** 		*ph = buffer[read_ptr];
  50:Inc/FwLogger.h **** 		read_ptr = (read_ptr+1)%128;
  51:Inc/FwLogger.h **** 		full = 0;
  52:Inc/FwLogger.h **** 		return 0;
  53:Inc/FwLogger.h **** 	}
  54:Inc/FwLogger.h **** 
  55:Inc/FwLogger.h **** 	void reset()
  56:Inc/FwLogger.h **** 	{
  57:Inc/FwLogger.h **** 		for(int i = 0; i < 128; ++i) buffer[i] = 0;
 1710              		.loc 2 57 0
 1711 0012 0023     		movs	r3, #0
 1712              	.LVL74:
 1713              	.L80:
 1714 0014 7F2B     		cmp	r3, #127
 1715 0016 04DC     		bgt	.L79
 1716 0018 0021     		movs	r1, #0
 1717 001a 0D4A     		ldr	r2, .L89
ARM GAS  /tmp/cc9h6Bqx.s 			page 58


 1718 001c D154     		strb	r1, [r2, r3]
 1719 001e 0133     		adds	r3, r3, #1
 1720              	.LVL75:
 1721 0020 F8E7     		b	.L80
 1722              	.L79:
 1723              	.LBE42:
  58:Inc/FwLogger.h **** 		write_ptr = 0;
 1724              		.loc 2 58 0
 1725 0022 0B4A     		ldr	r2, .L89
 1726 0024 0023     		movs	r3, #0
 1727              	.LVL76:
 1728 0026 82F88030 		strb	r3, [r2, #128]
  59:Inc/FwLogger.h **** 		read_ptr = 0;
 1729              		.loc 2 59 0
 1730 002a 82F88130 		strb	r3, [r2, #129]
  60:Inc/FwLogger.h **** 		full = 0;
 1731              		.loc 2 60 0
 1732 002e 82F88230 		strb	r3, [r2, #130]
 1733              	.LVL77:
 1734              	.LBE41:
 1735              	.LBE40:
 1736              	.LBE39:
 1737              	.LBE38:
 1738              	.LBB43:
 1739              	.LBB44:
 1740              	.LBB45:
 1741              	.LBB46:
  21:Inc/FwLogger.h **** 		for(int i = 0; i < 128; ++i) buf[i] = 0;
 1742              		.loc 2 21 0
 1743 0032 084A     		ldr	r2, .L89+4
 1744 0034 1370     		strb	r3, [r2]
 1745              	.LVL78:
 1746              	.L82:
 1747              	.LBB47:
  22:Inc/FwLogger.h **** 	}
 1748              		.loc 2 22 0
 1749 0036 7F2B     		cmp	r3, #127
 1750 0038 05DC     		bgt	.L81
 1751 003a 064A     		ldr	r2, .L89+4
 1752 003c 1A44     		add	r2, r2, r3
 1753 003e 0021     		movs	r1, #0
 1754 0040 5170     		strb	r1, [r2, #1]
 1755 0042 0133     		adds	r3, r3, #1
 1756              	.LVL79:
 1757 0044 F7E7     		b	.L82
 1758              	.L81:
 1759              	.LVL80:
 1760              	.LBE47:
 1761              	.LBE46:
 1762              	.LBE45:
 1763              	.LBE44:
 1764              	.LBE43:
  85:Src/main.cpp  **** 
 1765              		.loc 1 85 0
 1766 0046 0448     		ldr	r0, .L89+8
 1767              	.LVL81:
 1768 0048 FFF7FEFF 		bl	_ZN8FwLoggerC1Ev
ARM GAS  /tmp/cc9h6Bqx.s 			page 59


 1769              	.LVL82:
 1770              		.loc 1 1219 0
 1771 004c E0E7     		b	.L77
 1772              	.L90:
 1773 004e 00BF     		.align	2
 1774              	.L89:
 1775 0050 00000000 		.word	.LANCHOR17
 1776 0054 00000000 		.word	.LANCHOR18
 1777 0058 00000000 		.word	.LANCHOR19
 1778              		.cfi_endproc
 1779              	.LFE105:
 1781              		.section	.text._Z18SystemClock_Configv,"ax",%progbits
 1782              		.align	1
 1783              		.global	_Z18SystemClock_Configv
 1784              		.syntax unified
 1785              		.thumb
 1786              		.thumb_func
 1787              		.fpu softvfp
 1789              	_Z18SystemClock_Configv:
 1790              	.LFB82:
 228:Src/main.cpp  **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1791              		.loc 1 228 0
 1792              		.cfi_startproc
 1793              		@ args = 0, pretend = 0, frame = 88
 1794              		@ frame_needed = 0, uses_anonymous_args = 0
 1795 0000 30B5     		push	{r4, r5, lr}
 1796              	.LCFI40:
 1797              		.cfi_def_cfa_offset 12
 1798              		.cfi_offset 4, -12
 1799              		.cfi_offset 5, -8
 1800              		.cfi_offset 14, -4
 1801 0002 97B0     		sub	sp, sp, #92
 1802              	.LCFI41:
 1803              		.cfi_def_cfa_offset 104
 229:Src/main.cpp  **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1804              		.loc 1 229 0
 1805 0004 2822     		movs	r2, #40
 1806 0006 0021     		movs	r1, #0
 1807 0008 0CA8     		add	r0, sp, #48
 1808 000a FFF7FEFF 		bl	memset
 1809              	.LVL83:
 230:Src/main.cpp  **** 	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1810              		.loc 1 230 0
 1811 000e 0024     		movs	r4, #0
 1812 0010 0794     		str	r4, [sp, #28]
 1813 0012 0894     		str	r4, [sp, #32]
 1814 0014 0994     		str	r4, [sp, #36]
 1815 0016 0A94     		str	r4, [sp, #40]
 1816 0018 0B94     		str	r4, [sp, #44]
 231:Src/main.cpp  **** 
 1817              		.loc 1 231 0
 1818 001a 0194     		str	r4, [sp, #4]
 1819 001c 0294     		str	r4, [sp, #8]
 1820 001e 0394     		str	r4, [sp, #12]
 1821 0020 0494     		str	r4, [sp, #16]
 1822 0022 0594     		str	r4, [sp, #20]
 1823 0024 0694     		str	r4, [sp, #24]
ARM GAS  /tmp/cc9h6Bqx.s 			page 60


 235:Src/main.cpp  **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1824              		.loc 1 235 0
 1825 0026 0A23     		movs	r3, #10
 1826 0028 0C93     		str	r3, [sp, #48]
 236:Src/main.cpp  **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1827              		.loc 1 236 0
 1828 002a 0123     		movs	r3, #1
 1829 002c 1093     		str	r3, [sp, #64]
 237:Src/main.cpp  **** 	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 1830              		.loc 1 237 0
 1831 002e 1022     		movs	r2, #16
 1832 0030 1192     		str	r2, [sp, #68]
 238:Src/main.cpp  **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1833              		.loc 1 238 0
 1834 0032 1293     		str	r3, [sp, #72]
 239:Src/main.cpp  **** 	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 1835              		.loc 1 239 0
 1836 0034 0225     		movs	r5, #2
 1837 0036 1395     		str	r5, [sp, #76]
 241:Src/main.cpp  **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1838              		.loc 1 241 0
 1839 0038 4FF46013 		mov	r3, #3670016
 1840 003c 1593     		str	r3, [sp, #84]
 242:Src/main.cpp  **** 	{
 1841              		.loc 1 242 0
 1842 003e 0CA8     		add	r0, sp, #48
 1843 0040 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1844              	.LVL84:
 248:Src/main.cpp  **** 	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1845              		.loc 1 248 0
 1846 0044 0F23     		movs	r3, #15
 1847 0046 0793     		str	r3, [sp, #28]
 250:Src/main.cpp  **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1848              		.loc 1 250 0
 1849 0048 0895     		str	r5, [sp, #32]
 251:Src/main.cpp  **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1850              		.loc 1 251 0
 1851 004a 0994     		str	r4, [sp, #36]
 252:Src/main.cpp  **** 	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1852              		.loc 1 252 0
 1853 004c 4FF48063 		mov	r3, #1024
 1854 0050 0A93     		str	r3, [sp, #40]
 253:Src/main.cpp  **** 
 1855              		.loc 1 253 0
 1856 0052 0B94     		str	r4, [sp, #44]
 255:Src/main.cpp  **** 	{
 1857              		.loc 1 255 0
 1858 0054 2946     		mov	r1, r5
 1859 0056 07A8     		add	r0, sp, #28
 1860 0058 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1861              	.LVL85:
 259:Src/main.cpp  **** 	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 1862              		.loc 1 259 0
 1863 005c 0323     		movs	r3, #3
 1864 005e 0193     		str	r3, [sp, #4]
 260:Src/main.cpp  **** 	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 1865              		.loc 1 260 0
ARM GAS  /tmp/cc9h6Bqx.s 			page 61


 1866 0060 4FF40073 		mov	r3, #512
 1867 0064 0293     		str	r3, [sp, #8]
 261:Src/main.cpp  **** 	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1868              		.loc 1 261 0
 1869 0066 4FF44043 		mov	r3, #49152
 1870 006a 0393     		str	r3, [sp, #12]
 262:Src/main.cpp  **** 	{
 1871              		.loc 1 262 0
 1872 006c 01A8     		add	r0, sp, #4
 1873 006e FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1874              	.LVL86:
 266:Src/main.cpp  **** 
 1875              		.loc 1 266 0
 1876 0072 17B0     		add	sp, sp, #92
 1877              	.LCFI42:
 1878              		.cfi_def_cfa_offset 12
 1879              		@ sp needed
 1880 0074 30BD     		pop	{r4, r5, pc}
 1881              		.cfi_endproc
 1882              	.LFE82:
 1884              		.section	.text.main,"ax",%progbits
 1885              		.align	1
 1886              		.global	main
 1887              		.syntax unified
 1888              		.thumb
 1889              		.thumb_func
 1890              		.fpu softvfp
 1892              	main:
 1893              	.LFB81:
 127:Src/main.cpp  **** 	/* USER CODE BEGIN 1 */
 1894              		.loc 1 127 0
 1895              		.cfi_startproc
 1896              		@ args = 0, pretend = 0, frame = 24
 1897              		@ frame_needed = 0, uses_anonymous_args = 0
 1898 0000 70B5     		push	{r4, r5, r6, lr}
 1899              	.LCFI43:
 1900              		.cfi_def_cfa_offset 16
 1901              		.cfi_offset 4, -16
 1902              		.cfi_offset 5, -12
 1903              		.cfi_offset 6, -8
 1904              		.cfi_offset 14, -4
 1905 0002 86B0     		sub	sp, sp, #24
 1906              	.LCFI44:
 1907              		.cfi_def_cfa_offset 40
 136:Src/main.cpp  **** 
 1908              		.loc 1 136 0
 1909 0004 FFF7FEFF 		bl	HAL_Init
 1910              	.LVL87:
 143:Src/main.cpp  **** 
 1911              		.loc 1 143 0
 1912 0008 FFF7FEFF 		bl	_Z18SystemClock_Configv
 1913              	.LVL88:
 150:Src/main.cpp  **** 	MX_DMA_Init();
 1914              		.loc 1 150 0
 1915 000c FFF7FEFF 		bl	_ZL12MX_GPIO_Initv
 1916              	.LVL89:
 151:Src/main.cpp  **** 	MX_ADC1_Init();
ARM GAS  /tmp/cc9h6Bqx.s 			page 62


 1917              		.loc 1 151 0
 1918 0010 FFF7FEFF 		bl	_ZL11MX_DMA_Initv
 1919              	.LVL90:
 152:Src/main.cpp  **** 	MX_ADC3_Init();
 1920              		.loc 1 152 0
 1921 0014 FFF7FEFF 		bl	_ZL12MX_ADC1_Initv
 1922              	.LVL91:
 153:Src/main.cpp  **** 	MX_DAC_Init();
 1923              		.loc 1 153 0
 1924 0018 FFF7FEFF 		bl	_ZL12MX_ADC3_Initv
 1925              	.LVL92:
 154:Src/main.cpp  **** 	MX_I2C1_Init();
 1926              		.loc 1 154 0
 1927 001c FFF7FEFF 		bl	_ZL11MX_DAC_Initv
 1928              	.LVL93:
 155:Src/main.cpp  **** 	MX_I2C2_Init();
 1929              		.loc 1 155 0
 1930 0020 FFF7FEFF 		bl	_ZL12MX_I2C1_Initv
 1931              	.LVL94:
 156:Src/main.cpp  **** 	MX_RTC_Init();
 1932              		.loc 1 156 0
 1933 0024 FFF7FEFF 		bl	_ZL12MX_I2C2_Initv
 1934              	.LVL95:
 157:Src/main.cpp  **** 	MX_SDIO_SD_Init();
 1935              		.loc 1 157 0
 1936 0028 FFF7FEFF 		bl	_ZL11MX_RTC_Initv
 1937              	.LVL96:
 158:Src/main.cpp  **** 	MX_SPI1_Init();
 1938              		.loc 1 158 0
 1939 002c FFF7FEFF 		bl	_ZL15MX_SDIO_SD_Initv
 1940              	.LVL97:
 159:Src/main.cpp  **** 	MX_SPI2_Init();
 1941              		.loc 1 159 0
 1942 0030 FFF7FEFF 		bl	_ZL12MX_SPI1_Initv
 1943              	.LVL98:
 160:Src/main.cpp  **** 	MX_SPI3_Init();
 1944              		.loc 1 160 0
 1945 0034 FFF7FEFF 		bl	_ZL12MX_SPI2_Initv
 1946              	.LVL99:
 161:Src/main.cpp  **** 	MX_TIM1_Init();
 1947              		.loc 1 161 0
 1948 0038 FFF7FEFF 		bl	_ZL12MX_SPI3_Initv
 1949              	.LVL100:
 162:Src/main.cpp  **** 	MX_TIM2_Init();
 1950              		.loc 1 162 0
 1951 003c FFF7FEFF 		bl	_ZL12MX_TIM1_Initv
 1952              	.LVL101:
 163:Src/main.cpp  **** 	MX_TIM3_Init();
 1953              		.loc 1 163 0
 1954 0040 FFF7FEFF 		bl	_ZL12MX_TIM2_Initv
 1955              	.LVL102:
 164:Src/main.cpp  **** 	MX_TIM4_Init();
 1956              		.loc 1 164 0
 1957 0044 FFF7FEFF 		bl	_ZL12MX_TIM3_Initv
 1958              	.LVL103:
 165:Src/main.cpp  **** 	MX_USART1_UART_Init();
 1959              		.loc 1 165 0
ARM GAS  /tmp/cc9h6Bqx.s 			page 63


 1960 0048 FFF7FEFF 		bl	_ZL12MX_TIM4_Initv
 1961              	.LVL104:
 166:Src/main.cpp  **** 	MX_USART2_UART_Init();
 1962              		.loc 1 166 0
 1963 004c FFF7FEFF 		bl	_ZL19MX_USART1_UART_Initv
 1964              	.LVL105:
 167:Src/main.cpp  **** 	MX_USART3_UART_Init();
 1965              		.loc 1 167 0
 1966 0050 FFF7FEFF 		bl	_ZL19MX_USART2_UART_Initv
 1967              	.LVL106:
 168:Src/main.cpp  **** 
 1968              		.loc 1 168 0
 1969 0054 FFF7FEFF 		bl	_ZL19MX_USART3_UART_Initv
 1970              	.LVL107:
 171:Src/main.cpp  **** 	GPIO_InitStruct.Pin = GPIO_PIN_1;
 1971              		.loc 1 171 0
 1972 0058 0025     		movs	r5, #0
 1973 005a 0495     		str	r5, [sp, #16]
 172:Src/main.cpp  **** 	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 1974              		.loc 1 172 0
 1975 005c 0223     		movs	r3, #2
 1976 005e 0293     		str	r3, [sp, #8]
 173:Src/main.cpp  **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
 1977              		.loc 1 173 0
 1978 0060 0124     		movs	r4, #1
 1979 0062 0394     		str	r4, [sp, #12]
 175:Src/main.cpp  **** 	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 1980              		.loc 1 175 0
 1981 0064 0593     		str	r3, [sp, #20]
 176:Src/main.cpp  **** 
 1982              		.loc 1 176 0
 1983 0066 02A9     		add	r1, sp, #8
 1984 0068 3148     		ldr	r0, .L106
 1985 006a FFF7FEFF 		bl	HAL_GPIO_Init
 1986              	.LVL108:
 178:Src/main.cpp  **** 
 1987              		.loc 1 178 0
 1988 006e 2246     		mov	r2, r4
 1989 0070 3049     		ldr	r1, .L106+4
 1990 0072 3148     		ldr	r0, .L106+8
 1991 0074 FFF7FEFF 		bl	HAL_UART_Receive_IT
 1992              	.LVL109:
 181:Src/main.cpp  **** 	command_received = 0;
 1993              		.loc 1 181 0
 1994 0078 304B     		ldr	r3, .L106+12
 1995 007a 1D70     		strb	r5, [r3]
 182:Src/main.cpp  **** 
 1996              		.loc 1 182 0
 1997 007c 304B     		ldr	r3, .L106+16
 1998 007e 1D70     		strb	r5, [r3]
 185:Src/main.cpp  **** 	/* USER CODE END 2 */
 1999              		.loc 1 185 0
 2000 0080 0622     		movs	r2, #6
 2001 0082 3049     		ldr	r1, .L106+20
 2002 0084 3048     		ldr	r0, .L106+24
 2003 0086 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 2004              	.LVL110:
ARM GAS  /tmp/cc9h6Bqx.s 			page 64


 2005              	.L100:
 2006              	.LBB48:
 194:Src/main.cpp  **** 		{
 2007              		.loc 1 194 0
 2008 008a FFF7FEFF 		bl	HAL_GetTick
 2009              	.LVL111:
 2010 008e 401B     		subs	r0, r0, r5
 2011 0090 B0F57A7F 		cmp	r0, #1000
 2012 0094 2AD8     		bhi	.L103
 2013              	.L94:
 200:Src/main.cpp  **** 		{
 2014              		.loc 1 200 0
 2015 0096 2A4B     		ldr	r3, .L106+16
 2016 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2017 009a 7BBB     		cbnz	r3, .L104
 2018              	.L95:
 208:Src/main.cpp  **** 		{
 2019              		.loc 1 208 0
 2020 009c 274B     		ldr	r3, .L106+12
 2021 009e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2022 00a0 002B     		cmp	r3, #0
 2023 00a2 F2D1     		bne	.L100
 2024              	.LVL112:
 2025              	.LBB49:
 2026              	.LBB50:
  47:Inc/FwLogger.h **** 			return -1;
 2027              		.loc 2 47 0
 2028 00a4 294A     		ldr	r2, .L106+28
 2029 00a6 92F88130 		ldrb	r3, [r2, #129]	@ zero_extendqisi2
 2030 00aa 92F88020 		ldrb	r2, [r2, #128]	@ zero_extendqisi2
 2031 00ae 9342     		cmp	r3, r2
 2032 00b0 36D0     		beq	.L105
 2033              	.L98:
  49:Inc/FwLogger.h **** 		read_ptr = (read_ptr+1)%128;
 2034              		.loc 2 49 0
 2035 00b2 264A     		ldr	r2, .L106+28
 2036 00b4 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 2037 00b6 8DF80710 		strb	r1, [sp, #7]
  50:Inc/FwLogger.h **** 		full = 0;
 2038              		.loc 2 50 0
 2039 00ba 0133     		adds	r3, r3, #1
 2040 00bc 5942     		rsbs	r1, r3, #0
 2041 00be 03F07F03 		and	r3, r3, #127
 2042 00c2 01F07F01 		and	r1, r1, #127
 2043 00c6 58BF     		it	pl
 2044 00c8 4B42     		rsbpl	r3, r1, #0
 2045 00ca 82F88130 		strb	r3, [r2, #129]
  51:Inc/FwLogger.h **** 		return 0;
 2046              		.loc 2 51 0
 2047 00ce 0023     		movs	r3, #0
 2048 00d0 82F88230 		strb	r3, [r2, #130]
 2049              	.L99:
 2050              	.LVL113:
 2051              	.LBE50:
 2052              	.LBE49:
 210:Src/main.cpp  **** 			{
 2053              		.loc 1 210 0
ARM GAS  /tmp/cc9h6Bqx.s 			page 65


 2054 00d4 002B     		cmp	r3, #0
 2055 00d6 D8D1     		bne	.L100
 212:Src/main.cpp  **** 				transmitting = 1;
 2056              		.loc 1 212 0
 2057 00d8 0122     		movs	r2, #1
 2058 00da 0DF10701 		add	r1, sp, #7
 2059 00de 1648     		ldr	r0, .L106+8
 2060 00e0 FFF7FEFF 		bl	HAL_UART_Transmit_IT
 2061              	.LVL114:
 213:Src/main.cpp  **** 			}
 2062              		.loc 1 213 0
 2063 00e4 0122     		movs	r2, #1
 2064 00e6 154B     		ldr	r3, .L106+12
 2065 00e8 1A70     		strb	r2, [r3]
 2066              	.LBE48:
 219:Src/main.cpp  **** 	/* USER CODE END 3 */
 2067              		.loc 1 219 0
 2068 00ea CEE7     		b	.L100
 2069              	.L103:
 2070              	.LBB56:
 196:Src/main.cpp  **** 			last_tick = HAL_GetTick();
 2071              		.loc 1 196 0
 2072 00ec 0221     		movs	r1, #2
 2073 00ee 1048     		ldr	r0, .L106
 2074 00f0 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 2075              	.LVL115:
 197:Src/main.cpp  **** 		}
 2076              		.loc 1 197 0
 2077 00f4 FFF7FEFF 		bl	HAL_GetTick
 2078              	.LVL116:
 2079 00f8 0546     		mov	r5, r0
 2080              	.LVL117:
 2081 00fa CCE7     		b	.L94
 2082              	.LVL118:
 2083              	.L104:
 202:Src/main.cpp  **** 			logger.eval(rx_buffer.buf);
 2084              		.loc 1 202 0
 2085 00fc 0024     		movs	r4, #0
 2086 00fe 104B     		ldr	r3, .L106+16
 2087 0100 1C70     		strb	r4, [r3]
 203:Src/main.cpp  **** 			rx_buffer.reset();
 2088              		.loc 1 203 0
 2089 0102 134E     		ldr	r6, .L106+32
 2090 0104 711C     		adds	r1, r6, #1
 2091 0106 1348     		ldr	r0, .L106+36
 2092 0108 FFF7FEFF 		bl	_ZN8FwLogger4evalEPh
 2093              	.LVL119:
 2094              	.LBB52:
 2095              	.LBB53:
  21:Inc/FwLogger.h **** 		for(int i = 0; i < 128; ++i) buf[i] = 0;
 2096              		.loc 2 21 0
 2097 010c 3470     		strb	r4, [r6]
 2098              	.LVL120:
 2099              	.LBB54:
  22:Inc/FwLogger.h **** 	}
 2100              		.loc 2 22 0
 2101 010e 2346     		mov	r3, r4
ARM GAS  /tmp/cc9h6Bqx.s 			page 66


 2102              	.LVL121:
 2103              	.L96:
 2104 0110 7F2B     		cmp	r3, #127
 2105 0112 C3DC     		bgt	.L95
 2106 0114 0E4A     		ldr	r2, .L106+32
 2107 0116 1A44     		add	r2, r2, r3
 2108 0118 0021     		movs	r1, #0
 2109 011a 5170     		strb	r1, [r2, #1]
 2110 011c 0133     		adds	r3, r3, #1
 2111              	.LVL122:
 2112 011e F7E7     		b	.L96
 2113              	.LVL123:
 2114              	.L105:
 2115              	.LBE54:
 2116              	.LBE53:
 2117              	.LBE52:
 2118              	.LBB55:
 2119              	.LBB51:
  47:Inc/FwLogger.h **** 			return -1;
 2120              		.loc 2 47 0
 2121 0120 0A4A     		ldr	r2, .L106+28
 2122 0122 92F88220 		ldrb	r2, [r2, #130]	@ zero_extendqisi2
 2123 0126 002A     		cmp	r2, #0
 2124 0128 C3D1     		bne	.L98
  48:Inc/FwLogger.h **** 		*ph = buffer[read_ptr];
 2125              		.loc 2 48 0
 2126 012a 4FF0FF33 		mov	r3, #-1
 2127 012e D1E7     		b	.L99
 2128              	.L107:
 2129              		.align	2
 2130              	.L106:
 2131 0130 00180140 		.word	1073813504
 2132 0134 00000000 		.word	.LANCHOR20
 2133 0138 00000000 		.word	.LANCHOR14
 2134 013c 00000000 		.word	.LANCHOR21
 2135 0140 00000000 		.word	.LANCHOR22
 2136 0144 00000000 		.word	.LANCHOR23
 2137 0148 00000000 		.word	.LANCHOR1
 2138 014c 00000000 		.word	.LANCHOR17
 2139 0150 00000000 		.word	.LANCHOR18
 2140 0154 00000000 		.word	.LANCHOR19
 2141              	.LBE51:
 2142              	.LBE55:
 2143              	.LBE56:
 2144              		.cfi_endproc
 2145              	.LFE81:
 2147              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 2148              		.align	1
 2149              		.global	HAL_UART_RxCpltCallback
 2150              		.syntax unified
 2151              		.thumb
 2152              		.thumb_func
 2153              		.fpu softvfp
 2155              	HAL_UART_RxCpltCallback:
 2156              	.LFB102:
1192:Src/main.cpp  **** 	rx_buffer.push(rx_char);
 2157              		.loc 1 1192 0
ARM GAS  /tmp/cc9h6Bqx.s 			page 67


 2158              		.cfi_startproc
 2159              		@ args = 0, pretend = 0, frame = 0
 2160              		@ frame_needed = 0, uses_anonymous_args = 0
 2161              	.LVL124:
 2162 0000 38B5     		push	{r3, r4, r5, lr}
 2163              	.LCFI45:
 2164              		.cfi_def_cfa_offset 16
 2165              		.cfi_offset 3, -16
 2166              		.cfi_offset 4, -12
 2167              		.cfi_offset 5, -8
 2168              		.cfi_offset 14, -4
1193:Src/main.cpp  **** 	tx_buffer.push(rx_char);
 2169              		.loc 1 1193 0
 2170 0002 144B     		ldr	r3, .L111
 2171 0004 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 2172              	.LVL125:
 2173              	.LBB57:
 2174              	.LBB58:
  17:Inc/FwLogger.h **** 	}
 2175              		.loc 2 17 0
 2176 0006 144B     		ldr	r3, .L111+4
 2177 0008 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2178 000a 511C     		adds	r1, r2, #1
 2179 000c 1970     		strb	r1, [r3]
 2180 000e 1344     		add	r3, r3, r2
 2181 0010 5D70     		strb	r5, [r3, #1]
 2182              	.LVL126:
 2183              	.LBE58:
 2184              	.LBE57:
 2185              	.LBB59:
 2186              	.LBB60:
  37:Inc/FwLogger.h **** 		if(full)
 2187              		.loc 2 37 0
 2188 0012 1249     		ldr	r1, .L111+8
 2189 0014 91F88040 		ldrb	r4, [r1, #128]	@ zero_extendqisi2
 2190 0018 631C     		adds	r3, r4, #1
 2191 001a 5A42     		rsbs	r2, r3, #0
 2192 001c 03F07F03 		and	r3, r3, #127
 2193 0020 02F07F02 		and	r2, r2, #127
 2194 0024 58BF     		it	pl
 2195 0026 5342     		rsbpl	r3, r2, #0
 2196              	.LVL127:
  38:Inc/FwLogger.h **** 			return -1;
 2197              		.loc 2 38 0
 2198 0028 91F88220 		ldrb	r2, [r1, #130]	@ zero_extendqisi2
 2199 002c 62B9     		cbnz	r2, .L109
 2200 002e DBB2     		uxtb	r3, r3
  40:Inc/FwLogger.h **** 		write_ptr = new_write;
 2201              		.loc 2 40 0
 2202 0030 0A46     		mov	r2, r1
 2203 0032 0D55     		strb	r5, [r1, r4]
  41:Inc/FwLogger.h **** 		full = write_ptr == read_ptr;
 2204              		.loc 2 41 0
 2205 0034 81F88030 		strb	r3, [r1, #128]
  42:Inc/FwLogger.h **** 		return 0;
 2206              		.loc 2 42 0
 2207 0038 91F88110 		ldrb	r1, [r1, #129]	@ zero_extendqisi2
ARM GAS  /tmp/cc9h6Bqx.s 			page 68


 2208 003c 8B42     		cmp	r3, r1
 2209 003e 14BF     		ite	ne
 2210 0040 0023     		movne	r3, #0
 2211              	.LVL128:
 2212 0042 0123     		moveq	r3, #1
 2213 0044 82F88230 		strb	r3, [r2, #130]
 2214              	.L109:
 2215              	.LVL129:
 2216              	.LBE60:
 2217              	.LBE59:
1195:Src/main.cpp  **** }
 2218              		.loc 1 1195 0
 2219 0048 0122     		movs	r2, #1
 2220 004a 0249     		ldr	r1, .L111
 2221 004c FFF7FEFF 		bl	HAL_UART_Receive_IT
 2222              	.LVL130:
 2223 0050 38BD     		pop	{r3, r4, r5, pc}
 2224              	.L112:
 2225 0052 00BF     		.align	2
 2226              	.L111:
 2227 0054 00000000 		.word	.LANCHOR20
 2228 0058 00000000 		.word	.LANCHOR18
 2229 005c 00000000 		.word	.LANCHOR17
 2230              		.cfi_endproc
 2231              	.LFE102:
 2233              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 2234              		.align	1
 2235              		.global	HAL_UART_TxCpltCallback
 2236              		.syntax unified
 2237              		.thumb
 2238              		.thumb_func
 2239              		.fpu softvfp
 2241              	HAL_UART_TxCpltCallback:
 2242              	.LFB103:
1199:Src/main.cpp  **** 	uint8_t ph;
 2243              		.loc 1 1199 0
 2244              		.cfi_startproc
 2245              		@ args = 0, pretend = 0, frame = 8
 2246              		@ frame_needed = 0, uses_anonymous_args = 0
 2247              	.LVL131:
 2248 0000 00B5     		push	{lr}
 2249              	.LCFI46:
 2250              		.cfi_def_cfa_offset 4
 2251              		.cfi_offset 14, -4
 2252 0002 83B0     		sub	sp, sp, #12
 2253              	.LCFI47:
 2254              		.cfi_def_cfa_offset 16
 2255              	.LVL132:
 2256              	.LBB61:
 2257              	.LBB62:
  47:Inc/FwLogger.h **** 			return -1;
 2258              		.loc 2 47 0
 2259 0004 164A     		ldr	r2, .L122
 2260 0006 92F88130 		ldrb	r3, [r2, #129]	@ zero_extendqisi2
 2261 000a 92F88020 		ldrb	r2, [r2, #128]	@ zero_extendqisi2
 2262 000e 9342     		cmp	r3, r2
 2263 0010 17D0     		beq	.L120
ARM GAS  /tmp/cc9h6Bqx.s 			page 69


 2264              	.L114:
  49:Inc/FwLogger.h **** 		read_ptr = (read_ptr+1)%128;
 2265              		.loc 2 49 0
 2266 0012 134A     		ldr	r2, .L122
 2267 0014 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 2268 0016 8DF80710 		strb	r1, [sp, #7]
  50:Inc/FwLogger.h **** 		full = 0;
 2269              		.loc 2 50 0
 2270 001a 0133     		adds	r3, r3, #1
 2271 001c 5942     		rsbs	r1, r3, #0
 2272 001e 03F07F03 		and	r3, r3, #127
 2273 0022 01F07F01 		and	r1, r1, #127
 2274 0026 58BF     		it	pl
 2275 0028 4B42     		rsbpl	r3, r1, #0
 2276 002a 82F88130 		strb	r3, [r2, #129]
  51:Inc/FwLogger.h **** 		return 0;
 2277              		.loc 2 51 0
 2278 002e 0023     		movs	r3, #0
 2279 0030 82F88230 		strb	r3, [r2, #130]
 2280              	.L115:
 2281              	.LVL133:
 2282              	.LBE62:
 2283              	.LBE61:
1201:Src/main.cpp  **** 		HAL_UART_Transmit_IT(huart, &ph, 1);
 2284              		.loc 1 1201 0
 2285 0034 6BB1     		cbz	r3, .L121
1204:Src/main.cpp  **** }
 2286              		.loc 1 1204 0
 2287 0036 0022     		movs	r2, #0
 2288 0038 0A4B     		ldr	r3, .L122+4
 2289 003a 1A70     		strb	r2, [r3]
 2290              	.LVL134:
 2291              	.L113:
1205:Src/main.cpp  **** 
 2292              		.loc 1 1205 0
 2293 003c 03B0     		add	sp, sp, #12
 2294              	.LCFI48:
 2295              		.cfi_remember_state
 2296              		.cfi_def_cfa_offset 4
 2297              		@ sp needed
 2298 003e 5DF804FB 		ldr	pc, [sp], #4
 2299              	.LVL135:
 2300              	.L120:
 2301              	.LCFI49:
 2302              		.cfi_restore_state
 2303              	.LBB64:
 2304              	.LBB63:
  47:Inc/FwLogger.h **** 			return -1;
 2305              		.loc 2 47 0
 2306 0042 074A     		ldr	r2, .L122
 2307 0044 92F88220 		ldrb	r2, [r2, #130]	@ zero_extendqisi2
 2308 0048 002A     		cmp	r2, #0
 2309 004a E2D1     		bne	.L114
  48:Inc/FwLogger.h **** 		*ph = buffer[read_ptr];
 2310              		.loc 2 48 0
 2311 004c 4FF0FF33 		mov	r3, #-1
 2312 0050 F0E7     		b	.L115
ARM GAS  /tmp/cc9h6Bqx.s 			page 70


 2313              	.LVL136:
 2314              	.L121:
 2315              	.LBE63:
 2316              	.LBE64:
1202:Src/main.cpp  **** 	else
 2317              		.loc 1 1202 0
 2318 0052 0122     		movs	r2, #1
 2319 0054 0DF10701 		add	r1, sp, #7
 2320 0058 FFF7FEFF 		bl	HAL_UART_Transmit_IT
 2321              	.LVL137:
 2322 005c EEE7     		b	.L113
 2323              	.L123:
 2324 005e 00BF     		.align	2
 2325              	.L122:
 2326 0060 00000000 		.word	.LANCHOR17
 2327 0064 00000000 		.word	.LANCHOR21
 2328              		.cfi_endproc
 2329              	.LFE103:
 2331              		.section	.text.Error_Handler,"ax",%progbits
 2332              		.align	1
 2333              		.global	Error_Handler
 2334              		.syntax unified
 2335              		.thumb
 2336              		.thumb_func
 2337              		.fpu softvfp
 2339              	Error_Handler:
 2340              	.LFB104:
1214:Src/main.cpp  **** 	/* USER CODE BEGIN Error_Handler_Debug */
 2341              		.loc 1 1214 0
 2342              		.cfi_startproc
 2343              		@ args = 0, pretend = 0, frame = 0
 2344              		@ frame_needed = 0, uses_anonymous_args = 0
 2345              		@ link register save eliminated.
 2346 0000 7047     		bx	lr
 2347              		.cfi_endproc
 2348              	.LFE104:
 2350              		.section	.text._GLOBAL__sub_I_hadc1,"ax",%progbits
 2351              		.align	1
 2352              		.syntax unified
 2353              		.thumb
 2354              		.thumb_func
 2355              		.fpu softvfp
 2357              	_GLOBAL__sub_I_hadc1:
 2358              	.LFB106:
 2359              		.loc 1 1219 0
 2360              		.cfi_startproc
 2361              		@ args = 0, pretend = 0, frame = 0
 2362              		@ frame_needed = 0, uses_anonymous_args = 0
 2363              		.loc 1 1219 0
 2364 0000 08B5     		push	{r3, lr}
 2365              	.LCFI50:
 2366              		.cfi_def_cfa_offset 8
 2367              		.cfi_offset 3, -8
 2368              		.cfi_offset 14, -4
 2369              		.loc 1 1219 0
 2370 0002 4FF6FF71 		movw	r1, #65535
 2371 0006 0120     		movs	r0, #1
ARM GAS  /tmp/cc9h6Bqx.s 			page 71


 2372 0008 FFF7FEFF 		bl	_Z41__static_initialization_and_destruction_0ii
 2373              	.LVL138:
 2374 000c 08BD     		pop	{r3, pc}
 2375              		.cfi_endproc
 2376              	.LFE106:
 2378              		.section	.init_array,"aw",%init_array
 2379              		.align	2
 2380 0000 00000000 		.word	_GLOBAL__sub_I_hadc1(target1)
 2381              		.global	logger
 2382              		.global	adc3_data
 2383              		.global	adc1_data
 2384              		.global	command_received
 2385              		.global	transmitting
 2386              		.global	rx_char
 2387              		.global	rx_buffer
 2388              		.global	tx_buffer
 2389              		.global	hdma_usart3_tx
 2390              		.global	hdma_usart2_tx
 2391              		.global	hdma_usart1_tx
 2392              		.global	huart3
 2393              		.global	huart2
 2394              		.global	huart1
 2395              		.global	htim4
 2396              		.global	htim3
 2397              		.global	htim2
 2398              		.global	htim1
 2399              		.global	hdma_spi1_tx
 2400              		.global	hspi3
 2401              		.global	hspi2
 2402              		.global	hspi1
 2403              		.global	hsd
 2404              		.global	hrtc
 2405              		.global	hdma_i2c1_tx
 2406              		.global	hi2c2
 2407              		.global	hi2c1
 2408              		.global	hdac
 2409              		.global	hdma_adc3
 2410              		.global	hdma_adc1
 2411              		.global	hadc3
 2412              		.global	hadc1
 2413              		.section	.bss.adc1_data,"aw",%nobits
 2414              		.align	2
 2417              	adc1_data:
 2418 0000 00000000 		.space	12
 2418      00000000 
 2418      00000000 
 2419              		.section	.bss.adc3_data,"aw",%nobits
 2420              		.align	2
 2421              		.set	.LANCHOR23,. + 0
 2424              	adc3_data:
 2425 0000 00000000 		.space	12
 2425      00000000 
 2425      00000000 
 2426              		.section	.bss.command_received,"aw",%nobits
 2427              		.set	.LANCHOR22,. + 0
 2430              	command_received:
 2431 0000 00       		.space	1
ARM GAS  /tmp/cc9h6Bqx.s 			page 72


 2432              		.section	.bss.hadc1,"aw",%nobits
 2433              		.align	2
 2434              		.set	.LANCHOR0,. + 0
 2437              	hadc1:
 2438 0000 00000000 		.space	48
 2438      00000000 
 2438      00000000 
 2438      00000000 
 2438      00000000 
 2439              		.section	.bss.hadc3,"aw",%nobits
 2440              		.align	2
 2441              		.set	.LANCHOR1,. + 0
 2444              	hadc3:
 2445 0000 00000000 		.space	48
 2445      00000000 
 2445      00000000 
 2445      00000000 
 2445      00000000 
 2446              		.section	.bss.hdac,"aw",%nobits
 2447              		.align	2
 2448              		.set	.LANCHOR2,. + 0
 2451              	hdac:
 2452 0000 00000000 		.space	20
 2452      00000000 
 2452      00000000 
 2452      00000000 
 2452      00000000 
 2453              		.section	.bss.hdma_adc1,"aw",%nobits
 2454              		.align	2
 2457              	hdma_adc1:
 2458 0000 00000000 		.space	68
 2458      00000000 
 2458      00000000 
 2458      00000000 
 2458      00000000 
 2459              		.section	.bss.hdma_adc3,"aw",%nobits
 2460              		.align	2
 2463              	hdma_adc3:
 2464 0000 00000000 		.space	68
 2464      00000000 
 2464      00000000 
 2464      00000000 
 2464      00000000 
 2465              		.section	.bss.hdma_i2c1_tx,"aw",%nobits
 2466              		.align	2
 2469              	hdma_i2c1_tx:
 2470 0000 00000000 		.space	68
 2470      00000000 
 2470      00000000 
 2470      00000000 
 2470      00000000 
 2471              		.section	.bss.hdma_spi1_tx,"aw",%nobits
 2472              		.align	2
 2475              	hdma_spi1_tx:
 2476 0000 00000000 		.space	68
 2476      00000000 
 2476      00000000 
ARM GAS  /tmp/cc9h6Bqx.s 			page 73


 2476      00000000 
 2476      00000000 
 2477              		.section	.bss.hdma_usart1_tx,"aw",%nobits
 2478              		.align	2
 2481              	hdma_usart1_tx:
 2482 0000 00000000 		.space	68
 2482      00000000 
 2482      00000000 
 2482      00000000 
 2482      00000000 
 2483              		.section	.bss.hdma_usart2_tx,"aw",%nobits
 2484              		.align	2
 2487              	hdma_usart2_tx:
 2488 0000 00000000 		.space	68
 2488      00000000 
 2488      00000000 
 2488      00000000 
 2488      00000000 
 2489              		.section	.bss.hdma_usart3_tx,"aw",%nobits
 2490              		.align	2
 2493              	hdma_usart3_tx:
 2494 0000 00000000 		.space	68
 2494      00000000 
 2494      00000000 
 2494      00000000 
 2494      00000000 
 2495              		.section	.bss.hi2c1,"aw",%nobits
 2496              		.align	2
 2497              		.set	.LANCHOR3,. + 0
 2500              	hi2c1:
 2501 0000 00000000 		.space	84
 2501      00000000 
 2501      00000000 
 2501      00000000 
 2501      00000000 
 2502              		.section	.bss.hi2c2,"aw",%nobits
 2503              		.align	2
 2504              		.set	.LANCHOR4,. + 0
 2507              	hi2c2:
 2508 0000 00000000 		.space	84
 2508      00000000 
 2508      00000000 
 2508      00000000 
 2508      00000000 
 2509              		.section	.bss.hrtc,"aw",%nobits
 2510              		.align	2
 2511              		.set	.LANCHOR5,. + 0
 2514              	hrtc:
 2515 0000 00000000 		.space	20
 2515      00000000 
 2515      00000000 
 2515      00000000 
 2515      00000000 
 2516              		.section	.bss.hsd,"aw",%nobits
 2517              		.align	2
 2518              		.set	.LANCHOR6,. + 0
 2521              	hsd:
ARM GAS  /tmp/cc9h6Bqx.s 			page 74


 2522 0000 00000000 		.space	132
 2522      00000000 
 2522      00000000 
 2522      00000000 
 2522      00000000 
 2523              		.section	.bss.hspi1,"aw",%nobits
 2524              		.align	2
 2525              		.set	.LANCHOR7,. + 0
 2528              	hspi1:
 2529 0000 00000000 		.space	88
 2529      00000000 
 2529      00000000 
 2529      00000000 
 2529      00000000 
 2530              		.section	.bss.hspi2,"aw",%nobits
 2531              		.align	2
 2532              		.set	.LANCHOR8,. + 0
 2535              	hspi2:
 2536 0000 00000000 		.space	88
 2536      00000000 
 2536      00000000 
 2536      00000000 
 2536      00000000 
 2537              		.section	.bss.hspi3,"aw",%nobits
 2538              		.align	2
 2539              		.set	.LANCHOR9,. + 0
 2542              	hspi3:
 2543 0000 00000000 		.space	88
 2543      00000000 
 2543      00000000 
 2543      00000000 
 2543      00000000 
 2544              		.section	.bss.htim1,"aw",%nobits
 2545              		.align	2
 2546              		.set	.LANCHOR10,. + 0
 2549              	htim1:
 2550 0000 00000000 		.space	64
 2550      00000000 
 2550      00000000 
 2550      00000000 
 2550      00000000 
 2551              		.section	.bss.htim2,"aw",%nobits
 2552              		.align	2
 2553              		.set	.LANCHOR11,. + 0
 2556              	htim2:
 2557 0000 00000000 		.space	64
 2557      00000000 
 2557      00000000 
 2557      00000000 
 2557      00000000 
 2558              		.section	.bss.htim3,"aw",%nobits
 2559              		.align	2
 2560              		.set	.LANCHOR12,. + 0
 2563              	htim3:
 2564 0000 00000000 		.space	64
 2564      00000000 
 2564      00000000 
ARM GAS  /tmp/cc9h6Bqx.s 			page 75


 2564      00000000 
 2564      00000000 
 2565              		.section	.bss.htim4,"aw",%nobits
 2566              		.align	2
 2567              		.set	.LANCHOR13,. + 0
 2570              	htim4:
 2571 0000 00000000 		.space	64
 2571      00000000 
 2571      00000000 
 2571      00000000 
 2571      00000000 
 2572              		.section	.bss.huart1,"aw",%nobits
 2573              		.align	2
 2574              		.set	.LANCHOR14,. + 0
 2577              	huart1:
 2578 0000 00000000 		.space	64
 2578      00000000 
 2578      00000000 
 2578      00000000 
 2578      00000000 
 2579              		.section	.bss.huart2,"aw",%nobits
 2580              		.align	2
 2581              		.set	.LANCHOR15,. + 0
 2584              	huart2:
 2585 0000 00000000 		.space	64
 2585      00000000 
 2585      00000000 
 2585      00000000 
 2585      00000000 
 2586              		.section	.bss.huart3,"aw",%nobits
 2587              		.align	2
 2588              		.set	.LANCHOR16,. + 0
 2591              	huart3:
 2592 0000 00000000 		.space	64
 2592      00000000 
 2592      00000000 
 2592      00000000 
 2592      00000000 
 2593              		.section	.bss.logger,"aw",%nobits
 2594              		.align	2
 2595              		.set	.LANCHOR19,. + 0
 2598              	logger:
 2599 0000 00       		.space	1
 2600              		.section	.bss.rx_buffer,"aw",%nobits
 2601              		.align	2
 2602              		.set	.LANCHOR18,. + 0
 2605              	rx_buffer:
 2606 0000 00000000 		.space	129
 2606      00000000 
 2606      00000000 
 2606      00000000 
 2606      00000000 
 2607              		.section	.bss.rx_char,"aw",%nobits
 2608              		.set	.LANCHOR20,. + 0
 2611              	rx_char:
 2612 0000 00       		.space	1
 2613              		.section	.bss.transmitting,"aw",%nobits
ARM GAS  /tmp/cc9h6Bqx.s 			page 76


 2614              		.set	.LANCHOR21,. + 0
 2617              	transmitting:
 2618 0000 00       		.space	1
 2619              		.section	.bss.tx_buffer,"aw",%nobits
 2620              		.align	2
 2621              		.set	.LANCHOR17,. + 0
 2624              	tx_buffer:
 2625 0000 00000000 		.space	131
 2625      00000000 
 2625      00000000 
 2625      00000000 
 2625      00000000 
 2626              		.text
 2627              	.Letext0:
 2628              		.file 3 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 2629              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 2630              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 2631              		.file 6 "/usr/include/newlib/stdint.h"
 2632              		.file 7 "Drivers/CMSIS/Include/core_cm3.h"
 2633              		.file 8 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 2634              		.file 9 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 2635              		.file 10 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 2636              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 2637              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 2638              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 2639              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 2640              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 2641              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 2642              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dac.h"
 2643              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_i2c.h"
 2644              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rtc.h"
 2645              		.file 20 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_sdmmc.h"
 2646              		.file 21 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_sd.h"
 2647              		.file 22 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_spi.h"
 2648              		.file 23 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 2649              		.file 24 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 2650              		.file 25 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 2651              		.file 26 "Inc/main.h"
 2652              		.file 27 "/usr/include/newlib/c++/6.3.1/cstdint"
 2653              		.file 28 "/usr/include/newlib/c++/6.3.1/cstring"
 2654              		.file 29 "/usr/include/newlib/c++/6.3.1/arm-none-eabi/thumb/v7-m/bits/c++config.h"
 2655              		.file 30 "/usr/include/newlib/sys/lock.h"
 2656              		.file 31 "/usr/include/newlib/sys/_types.h"
 2657              		.file 32 "/usr/include/newlib/sys/reent.h"
 2658              		.file 33 "/usr/include/newlib/string.h"
 2659              		.file 34 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 2660              		.file 35 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim_ex.h"
 2661              		.file 36 "<built-in>"
ARM GAS  /tmp/cc9h6Bqx.s 			page 77


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/cc9h6Bqx.s:16     .text._ZL12MX_GPIO_Initv:0000000000000000 $t
     /tmp/cc9h6Bqx.s:22     .text._ZL12MX_GPIO_Initv:0000000000000000 _ZL12MX_GPIO_Initv
     /tmp/cc9h6Bqx.s:265    .text._ZL12MX_GPIO_Initv:0000000000000168 $d
     /tmp/cc9h6Bqx.s:275    .text._ZL11MX_DMA_Initv:0000000000000000 $t
     /tmp/cc9h6Bqx.s:281    .text._ZL11MX_DMA_Initv:0000000000000000 _ZL11MX_DMA_Initv
     /tmp/cc9h6Bqx.s:364    .text._ZL11MX_DMA_Initv:0000000000000070 $d
     /tmp/cc9h6Bqx.s:369    .text._ZL12MX_ADC1_Initv:0000000000000000 $t
     /tmp/cc9h6Bqx.s:375    .text._ZL12MX_ADC1_Initv:0000000000000000 _ZL12MX_ADC1_Initv
     /tmp/cc9h6Bqx.s:495    .text._ZL12MX_ADC1_Initv:0000000000000094 $d
     /tmp/cc9h6Bqx.s:501    .text._ZL12MX_ADC3_Initv:0000000000000000 $t
     /tmp/cc9h6Bqx.s:507    .text._ZL12MX_ADC3_Initv:0000000000000000 _ZL12MX_ADC3_Initv
     /tmp/cc9h6Bqx.s:624    .text._ZL12MX_ADC3_Initv:000000000000008c $d
     /tmp/cc9h6Bqx.s:630    .text._ZL11MX_DAC_Initv:0000000000000000 $t
     /tmp/cc9h6Bqx.s:636    .text._ZL11MX_DAC_Initv:0000000000000000 _ZL11MX_DAC_Initv
     /tmp/cc9h6Bqx.s:682    .text._ZL11MX_DAC_Initv:0000000000000028 $d
     /tmp/cc9h6Bqx.s:688    .text._ZL12MX_I2C1_Initv:0000000000000000 $t
     /tmp/cc9h6Bqx.s:694    .text._ZL12MX_I2C1_Initv:0000000000000000 _ZL12MX_I2C1_Initv
     /tmp/cc9h6Bqx.s:735    .text._ZL12MX_I2C1_Initv:0000000000000028 $d
     /tmp/cc9h6Bqx.s:742    .text._ZL12MX_I2C2_Initv:0000000000000000 $t
     /tmp/cc9h6Bqx.s:748    .text._ZL12MX_I2C2_Initv:0000000000000000 _ZL12MX_I2C2_Initv
     /tmp/cc9h6Bqx.s:789    .text._ZL12MX_I2C2_Initv:0000000000000028 $d
     /tmp/cc9h6Bqx.s:796    .text._ZL11MX_RTC_Initv:0000000000000000 $t
     /tmp/cc9h6Bqx.s:802    .text._ZL11MX_RTC_Initv:0000000000000000 _ZL11MX_RTC_Initv
     /tmp/cc9h6Bqx.s:872    .text._ZL11MX_RTC_Initv:000000000000005c $d
     /tmp/cc9h6Bqx.s:878    .text._ZL15MX_SDIO_SD_Initv:0000000000000000 $t
     /tmp/cc9h6Bqx.s:884    .text._ZL15MX_SDIO_SD_Initv:0000000000000000 _ZL15MX_SDIO_SD_Initv
     /tmp/cc9h6Bqx.s:925    .text._ZL15MX_SDIO_SD_Initv:0000000000000028 $d
     /tmp/cc9h6Bqx.s:931    .text._ZL12MX_SPI1_Initv:0000000000000000 $t
     /tmp/cc9h6Bqx.s:937    .text._ZL12MX_SPI1_Initv:0000000000000000 _ZL12MX_SPI1_Initv
     /tmp/cc9h6Bqx.s:986    .text._ZL12MX_SPI1_Initv:0000000000000034 $d
     /tmp/cc9h6Bqx.s:992    .text._ZL12MX_SPI2_Initv:0000000000000000 $t
     /tmp/cc9h6Bqx.s:998    .text._ZL12MX_SPI2_Initv:0000000000000000 _ZL12MX_SPI2_Initv
     /tmp/cc9h6Bqx.s:1046   .text._ZL12MX_SPI2_Initv:0000000000000030 $d
     /tmp/cc9h6Bqx.s:1052   .text._ZL12MX_SPI3_Initv:0000000000000000 $t
     /tmp/cc9h6Bqx.s:1058   .text._ZL12MX_SPI3_Initv:0000000000000000 _ZL12MX_SPI3_Initv
     /tmp/cc9h6Bqx.s:1106   .text._ZL12MX_SPI3_Initv:0000000000000030 $d
     /tmp/cc9h6Bqx.s:1112   .text._ZL12MX_TIM1_Initv:0000000000000000 $t
     /tmp/cc9h6Bqx.s:1118   .text._ZL12MX_TIM1_Initv:0000000000000000 _ZL12MX_TIM1_Initv
     /tmp/cc9h6Bqx.s:1233   .text._ZL12MX_TIM1_Initv:0000000000000084 $d
     /tmp/cc9h6Bqx.s:1239   .text._ZL12MX_TIM2_Initv:0000000000000000 $t
     /tmp/cc9h6Bqx.s:1245   .text._ZL12MX_TIM2_Initv:0000000000000000 _ZL12MX_TIM2_Initv
     /tmp/cc9h6Bqx.s:1326   .text._ZL12MX_TIM2_Initv:0000000000000058 $d
     /tmp/cc9h6Bqx.s:1331   .text._ZL12MX_TIM3_Initv:0000000000000000 $t
     /tmp/cc9h6Bqx.s:1337   .text._ZL12MX_TIM3_Initv:0000000000000000 _ZL12MX_TIM3_Initv
     /tmp/cc9h6Bqx.s:1419   .text._ZL12MX_TIM3_Initv:0000000000000058 $d
     /tmp/cc9h6Bqx.s:1425   .text._ZL12MX_TIM4_Initv:0000000000000000 $t
     /tmp/cc9h6Bqx.s:1431   .text._ZL12MX_TIM4_Initv:0000000000000000 _ZL12MX_TIM4_Initv
     /tmp/cc9h6Bqx.s:1513   .text._ZL12MX_TIM4_Initv:0000000000000058 $d
     /tmp/cc9h6Bqx.s:1519   .text._ZL19MX_USART1_UART_Initv:0000000000000000 $t
     /tmp/cc9h6Bqx.s:1525   .text._ZL19MX_USART1_UART_Initv:0000000000000000 _ZL19MX_USART1_UART_Initv
     /tmp/cc9h6Bqx.s:1564   .text._ZL19MX_USART1_UART_Initv:0000000000000024 $d
     /tmp/cc9h6Bqx.s:1570   .text._ZL19MX_USART2_UART_Initv:0000000000000000 $t
     /tmp/cc9h6Bqx.s:1576   .text._ZL19MX_USART2_UART_Initv:0000000000000000 _ZL19MX_USART2_UART_Initv
     /tmp/cc9h6Bqx.s:1615   .text._ZL19MX_USART2_UART_Initv:0000000000000024 $d
     /tmp/cc9h6Bqx.s:1621   .text._ZL19MX_USART3_UART_Initv:0000000000000000 $t
ARM GAS  /tmp/cc9h6Bqx.s 			page 78


     /tmp/cc9h6Bqx.s:1627   .text._ZL19MX_USART3_UART_Initv:0000000000000000 _ZL19MX_USART3_UART_Initv
     /tmp/cc9h6Bqx.s:1666   .text._ZL19MX_USART3_UART_Initv:0000000000000024 $d
     /tmp/cc9h6Bqx.s:1672   .text._Z41__static_initialization_and_destruction_0ii:0000000000000000 $t
     /tmp/cc9h6Bqx.s:1678   .text._Z41__static_initialization_and_destruction_0ii:0000000000000000 _Z41__static_initialization_and_destruction_0ii
     /tmp/cc9h6Bqx.s:1775   .text._Z41__static_initialization_and_destruction_0ii:0000000000000050 $d
     /tmp/cc9h6Bqx.s:1782   .text._Z18SystemClock_Configv:0000000000000000 $t
     /tmp/cc9h6Bqx.s:1789   .text._Z18SystemClock_Configv:0000000000000000 _Z18SystemClock_Configv
     /tmp/cc9h6Bqx.s:1885   .text.main:0000000000000000 $t
     /tmp/cc9h6Bqx.s:1892   .text.main:0000000000000000 main
     /tmp/cc9h6Bqx.s:2131   .text.main:0000000000000130 $d
     /tmp/cc9h6Bqx.s:2148   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/cc9h6Bqx.s:2155   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/cc9h6Bqx.s:2227   .text.HAL_UART_RxCpltCallback:0000000000000054 $d
     /tmp/cc9h6Bqx.s:2234   .text.HAL_UART_TxCpltCallback:0000000000000000 $t
     /tmp/cc9h6Bqx.s:2241   .text.HAL_UART_TxCpltCallback:0000000000000000 HAL_UART_TxCpltCallback
     /tmp/cc9h6Bqx.s:2326   .text.HAL_UART_TxCpltCallback:0000000000000060 $d
     /tmp/cc9h6Bqx.s:2332   .text.Error_Handler:0000000000000000 $t
     /tmp/cc9h6Bqx.s:2339   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc9h6Bqx.s:2351   .text._GLOBAL__sub_I_hadc1:0000000000000000 $t
     /tmp/cc9h6Bqx.s:2357   .text._GLOBAL__sub_I_hadc1:0000000000000000 _GLOBAL__sub_I_hadc1
     /tmp/cc9h6Bqx.s:2379   .init_array:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2598   .bss.logger:0000000000000000 logger
     /tmp/cc9h6Bqx.s:2424   .bss.adc3_data:0000000000000000 adc3_data
     /tmp/cc9h6Bqx.s:2417   .bss.adc1_data:0000000000000000 adc1_data
     /tmp/cc9h6Bqx.s:2430   .bss.command_received:0000000000000000 command_received
     /tmp/cc9h6Bqx.s:2617   .bss.transmitting:0000000000000000 transmitting
     /tmp/cc9h6Bqx.s:2611   .bss.rx_char:0000000000000000 rx_char
     /tmp/cc9h6Bqx.s:2605   .bss.rx_buffer:0000000000000000 rx_buffer
     /tmp/cc9h6Bqx.s:2624   .bss.tx_buffer:0000000000000000 tx_buffer
     /tmp/cc9h6Bqx.s:2493   .bss.hdma_usart3_tx:0000000000000000 hdma_usart3_tx
     /tmp/cc9h6Bqx.s:2487   .bss.hdma_usart2_tx:0000000000000000 hdma_usart2_tx
     /tmp/cc9h6Bqx.s:2481   .bss.hdma_usart1_tx:0000000000000000 hdma_usart1_tx
     /tmp/cc9h6Bqx.s:2591   .bss.huart3:0000000000000000 huart3
     /tmp/cc9h6Bqx.s:2584   .bss.huart2:0000000000000000 huart2
     /tmp/cc9h6Bqx.s:2577   .bss.huart1:0000000000000000 huart1
     /tmp/cc9h6Bqx.s:2570   .bss.htim4:0000000000000000 htim4
     /tmp/cc9h6Bqx.s:2563   .bss.htim3:0000000000000000 htim3
     /tmp/cc9h6Bqx.s:2556   .bss.htim2:0000000000000000 htim2
     /tmp/cc9h6Bqx.s:2549   .bss.htim1:0000000000000000 htim1
     /tmp/cc9h6Bqx.s:2475   .bss.hdma_spi1_tx:0000000000000000 hdma_spi1_tx
     /tmp/cc9h6Bqx.s:2542   .bss.hspi3:0000000000000000 hspi3
     /tmp/cc9h6Bqx.s:2535   .bss.hspi2:0000000000000000 hspi2
     /tmp/cc9h6Bqx.s:2528   .bss.hspi1:0000000000000000 hspi1
     /tmp/cc9h6Bqx.s:2521   .bss.hsd:0000000000000000 hsd
     /tmp/cc9h6Bqx.s:2514   .bss.hrtc:0000000000000000 hrtc
     /tmp/cc9h6Bqx.s:2469   .bss.hdma_i2c1_tx:0000000000000000 hdma_i2c1_tx
     /tmp/cc9h6Bqx.s:2507   .bss.hi2c2:0000000000000000 hi2c2
     /tmp/cc9h6Bqx.s:2500   .bss.hi2c1:0000000000000000 hi2c1
     /tmp/cc9h6Bqx.s:2451   .bss.hdac:0000000000000000 hdac
     /tmp/cc9h6Bqx.s:2463   .bss.hdma_adc3:0000000000000000 hdma_adc3
     /tmp/cc9h6Bqx.s:2457   .bss.hdma_adc1:0000000000000000 hdma_adc1
     /tmp/cc9h6Bqx.s:2444   .bss.hadc3:0000000000000000 hadc3
     /tmp/cc9h6Bqx.s:2437   .bss.hadc1:0000000000000000 hadc1
     /tmp/cc9h6Bqx.s:2414   .bss.adc1_data:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2420   .bss.adc3_data:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2431   .bss.command_received:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2433   .bss.hadc1:0000000000000000 $d
ARM GAS  /tmp/cc9h6Bqx.s 			page 79


     /tmp/cc9h6Bqx.s:2440   .bss.hadc3:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2447   .bss.hdac:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2454   .bss.hdma_adc1:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2460   .bss.hdma_adc3:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2466   .bss.hdma_i2c1_tx:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2472   .bss.hdma_spi1_tx:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2478   .bss.hdma_usart1_tx:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2484   .bss.hdma_usart2_tx:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2490   .bss.hdma_usart3_tx:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2496   .bss.hi2c1:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2503   .bss.hi2c2:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2510   .bss.hrtc:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2517   .bss.hsd:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2524   .bss.hspi1:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2531   .bss.hspi2:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2538   .bss.hspi3:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2545   .bss.htim1:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2552   .bss.htim2:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2559   .bss.htim3:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2566   .bss.htim4:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2573   .bss.huart1:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2580   .bss.huart2:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2587   .bss.huart3:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2594   .bss.logger:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2601   .bss.rx_buffer:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2612   .bss.rx_char:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2618   .bss.transmitting:0000000000000000 $d
     /tmp/cc9h6Bqx.s:2620   .bss.tx_buffer:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_DAC_Init
HAL_DAC_ConfigChannel
HAL_I2C_Init
HAL_RTC_Init
HAL_RTC_SetTime
HAL_RTC_SetDate
HAL_SD_Init
HAL_SD_ConfigWideBusOperation
HAL_SPI_Init
memset
HAL_TIM_OC_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_OC_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_TIM_PWM_Init
HAL_TIM_PWM_ConfigChannel
HAL_UART_Init
_ZN8FwLoggerC1Ev
HAL_RCC_OscConfig
ARM GAS  /tmp/cc9h6Bqx.s 			page 80


HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
HAL_UART_Receive_IT
HAL_ADC_Start_DMA
HAL_GetTick
HAL_UART_Transmit_IT
HAL_GPIO_TogglePin
_ZN8FwLogger4evalEPh
